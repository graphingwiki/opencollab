#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    hacked up from opencollab-import-mresolved
    
    @copyright: 2008-2009 Lari Huttunen, Juhani Eronen, Erno Kuusela
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>

"""
import sys
import os
import csv
import time
import optparse
import collections
import cPickle as pickle
from opencollab.util.config import parse_config
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.meta import Meta, Metas
from opencollab.util.wiki import importMetas
 
def parse_nvd_data(fname, metas, sw_keywords=''):
    from lxml import objectify
    objectify.enable_recursive_str()
    tree = objectify.parse(open(fname))
    e = tree.getroot().entry
    do_nvd_entry(e, metas)
    while 1:
        e = e.getnext()
        if e is None:
            break
        do_nvd_entry(e, metas, sw_keywords)

def do_nvd_entry(e, metas, sw_keywords=''):
    cveid = e.get('id')
    m = metas[cveid]

    for s in 'published-datetime', 'last-modified-datetime', 'security-protection', 'summary', 'severity':
        try:
            x = e['{http://scap.nist.gov/schema/vulnerability/0.4}' + s]
            m[s] = [unicode(x)]
            #print s, x.encode('ascii', 'replace')
        except AttributeError:
            pass

    try:
        vs = e['{http://scap.nist.gov/schema/vulnerability/0.4}vulnerable-software-list']
    except AttributeError:
        vs = []
    for s in vs:
        #print 'vulnerable-software', s['{http://scap.nist.gov/schema/vulnerability/0.4}product']
        m['vulnerable-software'] = [unicode(s['{http://scap.nist.gov/schema/vulnerability/0.4}product'])]
                   

    try:
        refs = e['{http://scap.nist.gov/schema/vulnerability/0.4}references']
    except AttributeError:
        refs = []

    for r in refs:
        #print 'ref',
        #print r['{http://scap.nist.gov/schema/vulnerability/0.4}source'],
        #print r['{http://scap.nist.gov/schema/vulnerability/0.4}reference'].get('href')
        m['reference'] = [unicode(r['{http://scap.nist.gov/schema/vulnerability/0.4}source']) + u' ' + unicode(r['{http://scap.nist.gov/schema/vulnerability/0.4}reference'].get('href'))]
    
    metric = lambda x: e['{http://scap.nist.gov/schema/vulnerability/0.4}cvss']['{http://scap.nist.gov/schema/cvss-v2/0.2}base_metrics']['{http://scap.nist.gov/schema/cvss-v2/0.2}' + x]
    
    for mn in 'score', 'access-vector', 'access-complexity', 'availability-impact', 'confidentiality-impact', 'integrity-impact':
        try:
            z =  metric(mn)
            #print 'cvss-'+mn, z
        except AttributeError:
            pass
        else:
            m['cvss-' + mn] = [unicode(z)]

    try:
        cweid = e['{http://scap.nist.gov/schema/vulnerability/0.4}cwe'].get("id")
    except AttributeError:
        pass
    else:
        if cweid:
            m["cwe-id"] = [cweid]

    m['gwikicategory'] = ['CategoryVulnerability']

    if sw_keywords:
        # only keep vulns that have keyword matches in "vulnerable-software"
        ok=0
        for w in sw_keywords.split():
            for s in m['vulnerable-software']:
                if w in s:
                    ok=1
        if not ok:
            del metas[cveid]
        #else:
        #    print 'leave', cveid, s

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
        default = None,
        metavar="CONFIG",
        help="CONFIG file path.")

    parser.add_option("-f", "--file",
                      dest="path",
                      default=None,
                      metavar="FILE",
                      help="Input FILE path.")
    parser.add_option("-t", "--template",
                      dest="template",
                      default=None,
                      metavar="TEMPLATE",
                      help="Wiki TEMPLATE.")
    parser.add_option("-u", "--url",
                      dest="url",
                      default=None,
                      metavar="COLLAB-URL",
                      help="COLLAB-URL to connect to.")
    parser.add_option("-k", "--sw-keywords",
                      dest="sw_keywords",
                      default='',
                      metavar="KEYWORDS",
                      help="Only include entries with one of KEYWORDS in the 'vulnerable-software' field")
    parser.add_option("-p", "--pickle",
                      dest="picklefn",
                      default=None,
                      metavar="PICKLE-FILENAME",
                      help="PICKLE-FILENAME to use instead of wiki")
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )
    parser.set_usage("%prog [options]")
    options, args = parser.parse_args()
    iopts={}
    failed = []
    if options.picklefn and os.path.exists(options.picklefn):
        start = time.time()
        page_metas = pickle.load(open(options.picklefn))
        print 'loaded %d metas from %s in %.2f s' % (len(metas), picklefn, time.time() - start)
    else:
        #page_metas = collections.defaultdict(Meta)
        page_metas = Metas()

    if options.config:
        iopts = parse_config(options.config, "creds", "import-nvd-xml")
    if options.path:
        path = options.path
    elif options.config and "path" in iopts["import-nvd-xml"]:
        path = iopts["import-nvd-xml"]["path"]
    else:
        parser.error("Input file name needs to be specified. Use -h for help.")
    if options.template:
        template = options.template
    elif options.config and "template" in iopts["import-nvd-xml"]:
        template = iopts["import-nvd-xml"]["template"]
    else:
        template = "CveTemplate"
    url = None
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    if not (url or options.picklefn):
        parser.error("Collab URL or pickle needs to be specified. Use -h for help.")
    if options.verbose:
        print "Parsing data from", path
    parse_nvd_data(path, page_metas, options.sw_keywords)

    if options.url:
        if options.verbose:
            print "Importing metas to", url
        failed = importMetas(collab, page_metas, template, options.verbose, False)
        if failed:
            for page in failed:
                if options.verbose:
                    print "ERROR uploading:",  page, repr(page_metas[page])
                else:
                    print "ERROR uploading:", page
    else:
        if options.verbose:
            print 'writing metas to', options.picklefn
        start = time.time()
        f=open(options.picklefn, 'w')
        pickle.dump(page_metas, f, 2)
        f.close()
        print 'done (%.2f s)' % (time.time() - start)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import re, sys, optparse
from opencollab.util.config import parseConfig
from opencollab.wiki import CLIWiki
from opencollab.meta import Metas, Meta, Func
from opencollab.util.wiki import importMetas
from opencollab.util.regexp import *

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
        metavar="CONFIG",
        help="CONFIG file path.")
    parser.add_option("-m", "--meta-name",
                      dest="meta",
                      default=None,
                      metavar="META",
                      help=("META key use for object instantiation."))
    parser.add_option("-s", "--selection",
                      dest="selection",
                      default=None,
                      metavar="SEARCH",
                      help=("Use MetaTable SEARCH arguments to fetch input from a collab instead reading them from STDIN."))
    parser.add_option("-t", "--template",
                      dest="template",
                      default=None,
                      metavar="TEMPLATE",
                      help=("Optional TEMPLATE to use. Defaults to IdentityTemplate."))
    parser.add_option("-u", "--url",
                      dest="url",
                      default=None,
                      metavar="COLLAB-URL",
                      help=("COLLAB-URL to connect to."))
    parser.add_option("-y", "--type",
                      dest="type",
                      default=None,
                      metavar="TYPE",
                      help=("Object TYPE to instantiate, e.g. TYPE=NAME."))
    parser.add_option("-v", "--verbose",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )
    parser.set_usage("%prog [options]")
    options, args = parser.parse_args()
    url=None
    iopts={}
    failed = []
    brackets = re.compile('[\[\]]')
    collab_metas = Metas()
    if options.config:
        iopts = parseConfig(options.config, "creds", "instantiate-objects")
    if options.meta:
        meta = options.meta
    elif options.config and "meta" in iopts["instantiate-objects"]:
        selection = iopts["instantiate-objects"]["meta"]
    else:
        sys.exit("You need to specify a meta key to use for object instantiation. Use -h for help.")
    if options.selection:
        selection = options.selection
    elif options.config and "selection" in iopts["instantiate-objects"]:
        selection = iopts["instantiate-objects"]["selection"]
    else:
        sys.exit("You need to specify a MetaTable() search argument for objects to instantiate.")
    if options.template:
        template=options.template
    elif options.config and "template" in iopts["instantiate-objects"]:
        template=iopts["instantiate-objects"]["template"]
    else:
        template="IdentityTemplate"
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    else:
        parser.error("Collab URL needs to be specified. Use -h for help.")
    if options.type:
        type = options.type
    elif options.config and "type" in iopts["instantiate-objects"]:
        type = iopts["instantiate-objects"]["type"]
    else:
        parser.error("You need to specify a type for the objects to be instantiated. Use -h for help.")
    if options.verbose:
        print "Fetching identities from collab."
    pages = collab.getMeta(selection)
    for page in pages:
        for m in pages[page][meta]:
            m = brackets.sub('', m)
            collab_metas[m]["TYPE"].add(type)
    failed = importMetas(collab, collab_metas, template, options.verbose, False)
    if failed:
        for page in failed:
            if options.verbose:
                print "ERROR uploading:", page, repr(collab_metas[page])
            else:
                print "ERROR uploading:", page

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

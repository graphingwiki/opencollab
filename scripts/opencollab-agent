#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import time
import socket
import signal
import pickle
import random

from opencollab.meta import Meta
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util import loadCredsFromConfig

def processIsAlive(processId):
    try:
        pid, status = os.waitpid(processId, os.WNOHANG)
    except os.error:
        return False

    return pid != processId

def execute(page, script, keys):
    locals = dict()

    exec script in locals

    func = locals.get("execute")
    return func(page, **keys)

def runOneTask(agentId, wiki, interval=10.0, dieAfter=10*60.0):
    while True:
        print "Fetching a new task"
        newTask = wiki.request("TaskServer", agentId, "get")
        if newTask:
            break

        print "No new task found"
        time.sleep(interval)

    page, metas, lang, script = newTask
    print "Got task '%s'" % page
    print " lang: %s" % lang
    print " metas: %s" % repr(metas)

    readFd, writeFd = os.pipe()

    pid = os.fork()
    if pid == 0:
        os.close(readFd)

        result = execute(page, script, metas)
        os.write(writeFd, pickle.dumps(result))
        os.close(writeFd)
        os._exit(0)

    os.close(writeFd)

    pollInterval = 0.1
    lastHeartBeat = checkpoint = time.time()
    while True:
        if not processIsAlive(pid):
            reader = os.fdopen(readFd, "rb")
            data = reader.read()
            reader.close()

            result = pickle.loads(data)
            print "Got result %s" % repr(result)

            wiki.request("TaskServer", agentId, "close", page, result)
            print "Sent result"
            break

        if time.time()-lastHeartBeat >= interval:
            socket.setdefaulttimeout(2 * interval)
            try:
                try:
                    print " ...heartbeat..."
                    wiki.request("TaskServer", agentId, "change", page)
                except WikiFailure, failure:
                    print failure
                else:
                    checkpoint = time.time()
            finally:
                socket.setdefaulttimeout(None)
            lastHeartBeat = time.time()

        if time.time()-checkpoint >= dieAfter:
            os.kill(pid, signal.SIGINT)
            while processIsAlive(pid):
                time.sleep(pollInterval)
            return

        time.sleep(pollInterval)

def main():
    import optparse

    parser = optparse.OptionParser()
    parser.add_option("-n", "--name",
                      dest="name",
                      default=None,
                      metavar="NAME",
                      help="force the agent's name to NAME")
    parser.add_option("-c", "--config",
                      dest="config",
                      default=None,
                      metavar="CONFIG",
                      help=("read the username and password from the "+
                            "config file CONFIG"))
    options, args = parser.parse_args()
    if len(args) < 1:
        parser.error("wiki url has to be defined")

    url = args[0]
    wiki = CLIWiki(url)

    if options.config is not None:
        loadCredsFromConfig(wiki, options.config)

    name = options.name
    if name is None:
        name = socket.gethostbyname(socket.gethostname())
    name += "-%d" % random.randint(0, 2**32)

    print "Getting tasks from %s as agent %s" % (url, name)

    while True:
        runOneTask(name, wiki)

if __name__ == "__main__":
    main()

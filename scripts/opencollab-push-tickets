#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    opencollab-push-tickets is an attempt to learn 
    roundup data retrieval for opencollab push semantics
    based on a customer username or organisation name.

    @copyright: 2008-2010 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import sys
import socket
import optparse
import roundup
from roundup import instance
from opencollab.meta import Meta, Metas
from opencollab.util.config import parseOptions
from opencollab.wiki import CLIWiki, WikiFailure

ROUNDUP_KEYS = [
    'activity', 'actor', 'address', 'alternate_addresses',
    'author', 'content', 'creation', 'creator', 'date',
    'files', 'gwikilabel', 'id', 'inreplyto', 'messageid',
    'name', 'order', 'organisation', 'password', 'phone',
    'queries', 'realname', 'recipients', 'roles', 'summary',
    'timezone', 'type', 'username', 'retired', 'priority',
    'customer', 'status', 'title', 'nosy', 'messages',
    'assignedto', 'topic', 'superseder'
]


def parseInputFile(inputfile):
    """
    If you want to have several customers to filter by, you can
    use an input file specify that set of customers.
    """
    customers = []
    try:
        file = open(inputfile, "r")
        lines = file.readlines()
        file.close()
    except IOError:
        error = "Input file: " + file + " doesn't exist."
        sys.exit(error)
    for line in lines:
        line = line.strip()
        customers.append(line)
    return set(customers)


def openDB(tpath):
    """"
    Try to open a Roundup DB from tpath as user admin.
    """
    try:
        tracker = instance.open(tpath)
    except roundup.configuration.NoConfigError, e:
        sys.exit(e)
    else:
        db = tracker.open("admin")
        return db


def getUser(db, user):
    """
    User properties:
    'username', 'creation', 'alternate_addresses', 'realname', 'roles',
    'creator', 'organisation', 'address', 'actor', 'phone', 'activity',
    'queries', 'timezone', 'password', 'id']
    """
    udata = Meta()
    unode = db.user.getnode(user)
    attr = ['organisation', 'phone']
    for k in attr:
        v = unode.get(k)
        if v is None:
            continue
        udata[k].add(v)
    username = unode.get('username')
    udata['username'].add('[[%s]]' % username)
    realname = unode.get('realname')
    if realname is not None:
        udata['realname'].add(realname)
        udata['gwikilabel'].add(realname)
    retired = db.user.is_retired(user)
    udata['retired'].add('%s' % retired)
    return udata


def filterIssues(db, filter, verbose):
    """
    Filter issues based on a customer organisation or useraname.
    """
    issues = []
    for issue_id in db.issue.list():
        issue = db.issue.getnode(issue_id)
        customer = issue.get('customer')
        if customer:
            if None in filter:
                issues.append(issue_id)
            else:
                idata = Meta()
                idata.update(getUser(db, customer.pop()))
                username = idata['username']
                organisation = idata['organisation']
                uset = set(username) | set(organisation)
                match = uset & filter
                if match:
                    issues.append(issue_id)
        else:
            if verbose:
                print 'NOTE: issue' + issue_id, "skipped, since there is no customer."
    return issues


def getMessage(db, msg):
    """
    Message properties:
    ['files', 'inreplyto', 'recipients', 'author', 'creation', 'actor',
    'summary', 'content', 'creator', 'messageid', 'date', 'activity',
    'type', 'id']
    """
    message = Meta()
    msgobj = db.msg.getnode(msg)
    for f in msgobj.get('files'):
        message['file'].add('[[file%s]]' % f)
    for r in msgobj.get('recipients'):
        message['recipient'].add('[[user%s]]' % r)
    users = ['author', 'actor', 'creator']
    for u in users:
        user = msgobj.get(u)
        message[u].add('[[user%s]]' % user)
    #strings = ['inreplyto', 'summary', 'messageid', 'type']
    strings = ['inreplyto', 'messageid', 'type']
    for s in strings:
        string = msgobj.get(s)
        if string is None:
            continue
        message[s].add(string)
    #content = msgobj.get('content')
    #message['content'].add('{{{\n%s\n}}}' % content)
    return message


def getFile(db, f):
    """
    File properties:
    ['name', 'creator', 'creation', 'actor', 'content', 'activity', 'type', 'id']
    """
    fileobj = Meta()
    fobj = db.file.getnode(f)
    #attachment = fobj.get('content')
    #fileobj['attachment'].add(attachment)
    name = fobj.get('name')
    fileobj['content'].add('[[attachment:%s]]' % name)
    fileobj['gwikilabel'].add(name)
    fileobj['type'].add(fobj.get('type'))
    attr = ['creator', 'actor']
    for u in attr:
        user = fobj.get(u)
        fileobj[u].add('[[user%s]]' % user)
    return fileobj


def getMetaData(db):
    """
    Metadata classes:
    ['priority', 'status']
    """
    metadata = Metas()
    for m in db.priority.list():
        order = unicode(db.priority.getnode(m).get('order'))
        name = db.priority.getnode(m).get('name')
        page = "priority" + m
        metadata[page]['order'].add(order)
        metadata[page]['name'].add(name)
        metadata[page]['gwikilabel'].add(name)
        metadata[page]['gwikicategory'].add('CategoryRoundupPriority')
    for m in db.status.list():
        order = unicode(db.status.getnode(m).get('order'))
        name = db.status.getnode(m).get('name')
        page = "status" + m
        metadata[page]['order'].add(order)
        metadata[page]['name'].add(name)
        metadata[page]['gwikilabel'].add(name)
        metadata[page]['gwikicategory'].add('CategoryRoundupStatus')
    return metadata


def main():
    parser = optparse.OptionParser()
    parser.add_option("-f", "--filter",
                      dest="filter", default=None,
                      metavar="FILTER", help=("Organisation name or username to FILTER by."))
    parser.add_option("-i", "--input-file",
                      dest="inputfile", default=None,
                      metavar="INPUTFILE", help=("An INPUTFILE listing organisation names and/or usernames to FILTER by (one per line)."))
    parser.add_option("-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar="LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option("-n", "--tracker-name",
                      dest="tracker", default=None,
                      metavar="NAME", help=("Tracker NAME."))
    parser.add_option("-p", "--tracker-path",
                      dest="configpath", default=None,
                      metavar="PATH", help=("Tracker configuration directory PATH."))
    parser.add_option("-D", "--data",
        action="store_true", dest="data", default=False,
        metavar="DATA", help="Push issue message and file objects, not just links to them.")
    parser.set_usage("%prog [options]")
    issues = Metas()
    sect = "push-tickets"
    ops = parseOptions(parser, sect)
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    verbose = ops[sect]["verbose"]
    url = ops["creds"]["url"]
    template = "RoundupTemplate"
    replace = ops[sect]["lasteditwins"]
    filter = ops[sect]["filter"]
    inputfile = ops[sect]["inputfile"]
    tracker = ops[sect]["tracker"]
    configpath = ops[sect]["configpath"]
    origdata = ops[sect]["data"]
    while True:
        try:
            collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if tracker is None:
        parser.error("Use -n or --tracker-name to specify the RoundUp tracker name.")
    if inputfile is not None:
        iset = parseInputFile(inputfile)
        if filter is not None:
            filter = set([filter]) | iset
        else:
            filter = iset
    else:
        filter = set([filter])
    if configpath is not None:
        # DB classes:
        # "status", "timelog", "keyword", "priority", "user",
        # "file", "msg", "query", "issue"
        db = openDB(configpath)
        if verbose:
            print "NOTE: Getting issue data from the", tracker, "tracker."
        issueids = set(filterIssues(db, filter, verbose))
        for id in issueids:
            # Issue properties:
            # ['customer', 'status', 'title', 'nosy', 'creation', 'messages',
            # 'actor', 'times', 'priority', 'assignedto', 'topic', 'creator',
            # 'activity', 'superseder', 'id', 'files']
            issue = db.issue.getnode(id)
            ipage = "issue" + id
            statuspage = "status" + issue.get("status")
            issues[ipage]["gwikicategory"].add("CategoryRoundupIssue")
            issues[ipage]["gwikitemplate"].add(template)
            issues[ipage]["tracker"].add(tracker)
            issues[ipage]["status"].add('[[%s]]' % statuspage)
            issues[ipage]["title"].add(issue.get("title"))
            #creation = issue.get("creation")
            #issues[ipage]["creation"].add(issue.get(creation))
            for msg in issue.get("messages"):
                mpage = "msg" + msg
                issues[ipage]["message"].add('[[msg%s]]' % msg)
                if origdata:
                    issues[mpage].update(getMessage(db, msg))
                    issues[mpage]["gwikicategory"].add("CategoryRoundupMessage")
                    issues[mpage]["tracker"].add(tracker)
            priority = issue.get("priority")
            issues[ipage]["priority"].add('[[priority%s]]' % priority)
            for file in issue.get("files"):
                fpage = "file" + file
                issues[ipage]["file"].add('[[file%s]]' % file)
                if origdata:
                    issues[fpage].update(getFile(db, file))
                    issues[fpage]["gwikicategory"].add("CategoryRoundupFile")
                    issues[fpage]["gwikitemplate"].add(template)
                    issues[fpage]["tracker"].add(tracker)
            attr = ['customer', 'actor', 'assignedto', 'creator']
            for a in attr:
                uid = issue.get(a)
                try:
                    userid = uid.pop()
                except AttributeError:
                    userid = uid
                except IndexError:
                    continue
                if userid is None:
                    continue
                userpage = "user" + userid
                issues[ipage][a].add('[[%s]]' % userpage)
                issues[userpage].update(getUser(db, userid))
                issues[userpage]["gwikicategory"].add("CategoryRoundupUser")
                issues[userpage]["gwikitemplate"].add(template)
                issues[userpage]["tracker"].add(tracker)
            nosy = issue.get('nosy')
            for userid in nosy:
                userpage = "user" + userid
                issues[ipage]["nosy"].add('[[%s]]' % userpage)
                issues[userpage].update(getUser(db, userid))
                issues[userpage]["gwikicategory"].add("CategoryRoundupUser")
                issues[userpage]["gwikitemplate"].add(template)
            metadata = ['priority', 'status']
        issues.update(getMetaData(db))
        db.close()

        if verbose:
            print "NOTE: Importing metas to", url
        cleared = Meta()
        if replace:
            for page, meta in issues.iteritems():
                cleared[page] = ROUNDUP_KEYS
        collab.incSetMeta(cleared, Metas(), issues)

    else:
        parser.error(" Use -p or --tracker-path to specify the tracker configuration path.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

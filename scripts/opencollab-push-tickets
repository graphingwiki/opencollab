#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    opencollab-push-tickets is an attempt to learn 
    roundup data retrieval for opencollab push semantics
    based on a customer username or organisation name.

    @copyright: 2008-2010 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import sys, socket, re, optparse, cStringIO, base64
import roundup
from roundup import instance
from opencollab.util.config import parseConfig
from opencollab.meta import Meta, Metas
from opencollab.util.config import parseOptions
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.wiki import importMetas

def openDB(tpath):
    """"
    Try to open a Roundup DB from tpath as user admin.
    """
    try:
        tracker = instance.open( tpath )
    except roundup.configuration.NoConfigError, e:
        sys.exit(e)
    else:
        db = tracker.open( "admin" )
        return db

def getUser(db, user):
    """
    User properties:
    'username', 'creation', 'alternate_addresses', 'realname', 'roles', 
    'creator', 'organisation', 'address', 'actor', 'phone', 'activity', 
    'queries', 'timezone', 'password', 'id']
    """
    udata = Meta()
    unode = db.user.getnode(user)
    attr = ['username', 'realname', 'organisation', 'phone']
    for k in attr:
        key = unode.get(k)
        if key is None:
            key = "None"
        udata[k].add(key)
    return udata

def filterIssues(db, filter):
    """
    Filter issues based on a customer organisation or useraname.
    """
    issues = []
    mfilter = Meta()
    mfilter[filter] = filter
    mkey = mfilter[filter]
    for issue_id in db.issue.list(): 
        issue = db.issue.getnode(issue_id)
        customer = issue.get('customer')
        if customer:
            idata = Meta()
            idata.update(getUser(db, customer.pop()))
            username = idata['username']
            organisation = idata['organisation']
            if mkey in username or mkey in organisation:
                issues.append(issue_id)
    return issues

def getMessage(db, msg):
    """
    Message properties:
    ['files', 'inreplyto', 'recipients', 'author', 'creation', 'actor',
    'summary', 'content', 'creator', 'messageid', 'date', 'activity',
    'type', 'id']
    """
    message = Meta()
    msgobj = db.msg.getnode(msg)
    for f in msgobj.get('files'):
        message['file'].add('[[file%s]]' % f)
    for r in msgobj.get('recipients'):
        message['recipient'].add('[[user%s]]' % r)
    users = ['author', 'actor', 'creator']
    for u in users:
        user = msgobj.get(u)
        message[u].add('[[user%s]]' % user)
    strings = ['inreplyto', 'summary', 'messageid', 'type']
    for s in strings:
        string = msgobj.get(s)
        if string is None:
            string = "None"
        message[s].add(string)
    content = msgobj.get('content')
    message['content'].add('{{{\n%s\n}}}' % content)
    return message

def getFile(db, f):
    """ File properties:
        ['name', 'creator', 'creation', 'actor', 'content', 'activity', 'type', 'id']
    """
    fileobj = Meta()
    fobj = db.file.getnode(f)
    #attachment = fobj.get('content')
    #fileobj['attachment'].add(attachment)
    name = fobj.get('name')
    fileobj['content'].add('[[attachment:%s]]' % name)
    fileobj['type'].add(fobj.get('type'))
    attr = ['creator', 'actor']
    for u in attr:
        user = fobj.get(u)
        fileobj[u].add('[[%s]]' % user)
    return fileobj

def main():
    parser = optparse.OptionParser()
    parser.add_option("-f", "--filter",
                      dest="filter", default=None,
                      metavar="FILTER", help=("Organisation name or username to FILTER by."))
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option("-n", "--tracker-name",
                      dest="tracker", default=None,
                      metavar="NAME", help=("Tracker NAME."))
    parser.add_option("-p", "--tracker-path",
                      dest="configpath", default=None,
                      metavar="PATH", help=("Tracker configuration directory PATH."))
    parser.set_usage("%prog [options]")
    issues = Metas()
    sect = "push-tickets"
    ops = parseOptions(parser, sect, template=True) 
    verbose = ops[sect]["verbose"]
    url = ops["creds"]["url"]
    template = ops[sect]["template"]
    replace = ops[sect]["lasteditwins"]
    filter = ops[sect]["filter"]
    tracker = ops[sect]["tracker"]
    configpath = ops[sect]["configpath"]
    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if filter is None:
        parser.error("Use -f or --filter to select issues by customer organisation or username.")
    if tracker is None:
        parser.error("Use -n or --tracker-name to specify the RoundUp tracker name.")
    if configpath is not None:
        # DB classes:
        # "status", "timelog", "keyword", "priority", "user", 
        # "file", "msg", "query", "issue"
        db = openDB(configpath)
        issueids = set(filterIssues(db, filter))
        if verbose:
            print "NOTE: Getting issue data from the", tracker, "tracker."
        for id in issueids:
            # Issue properties:
            # ['customer', 'status', 'title', 'nosy', 'creation', 'messages', 
            # 'actor', 'times', 'priority', 'assignedto', 'topic', 'creator', 
            # 'activity', 'superseder', 'id', 'files']
            issue = db.issue.getnode(id)
            ipage = "issue" + id
            statuspage = "status" + issue.get("status")
            issues[ipage]["TYPE"].add("RoundupIssue")
            issues[ipage]["TRACKER"].add(tracker)
            issues[ipage]["status"].add('[[%s]]' % statuspage)
            issues[ipage]["title"].add(issue.get("title"))
    if configpath is not None:
        # DB classes:
        # "status", "timelog", "keyword", "priority", "user", 
        # "file", "msg", "query", "issue"
        db = openDB(configpath)
        issueids = set(filterIssues(db, filter))
        if verbose:
            print "NOTE: Getting issue data from the", tracker, "tracker."
        for id in issueids:
            # Issue properties:
            # ['customer', 'status', 'title', 'nosy', 'creation', 'messages', 
            # 'actor', 'times', 'priority', 'assignedto', 'topic', 'creator', 
            # 'activity', 'superseder', 'id', 'files']
            issue = db.issue.getnode(id)
            ipage = "issue" + id
            statuspage = "status" + issue.get("status")
            issues[ipage]["TYPE"].add("RoundupIssue")
            issues[ipage]["TRACKER"].add(tracker)
            issues[ipage]["status"].add('[[%s]]' % statuspage)
            issues[ipage]["title"].add(issue.get("title"))
            #creation = issue.get("creation")
            #issues[ipage]["creation"].add(issue.get(creation))
            for msg in issue.get("messages"):
                mpage = "msg" + msg
                issues[ipage]["message"].add('[[msg%s]]' % msg)
                issues[mpage].update(getMessage(db, msg))
                issues[mpage]["TYPE"].add("RoundupMessage")
                issues[mpage]["TRACKER"].add(tracker)
            priority = issue.get("priority")
            issues[ipage]["priority"].add('[[priority%s]]' % priority)
            for file in issue.get("files"):
                fpage = "file" + file
                issues[ipage]["file"].add('[[file%s]]' % file)
                issues[fpage].update(getFile(db, file))
                issues[fpage]["TYPE"].add("RoundupFile")
                issues[fpage]["TRACKER"].add(tracker)
            attr = ['customer', 'actor', 'assignedto', 'creator']
            for a in attr:
                uid = issue.get(a)
                try:
                    userid = uid.pop()
                except AttributeError:
                    userid = uid
                except IndexError:
                    continue
                userpage = "user" + userid
                issues[ipage][a].add('[[%s]]' % userpage)
                issues[userpage].update(getUser(db, userid))
                issues[userpage]["TYPE"].add("RoundupUser")
                issues[userpage]["TRACKER"].add(tracker)
            nosy = issue.get('nosy')
            for userid in nosy:
                userpage = "user" + userid
                issues[ipage]["nosy"].add('[[%s]]' % userpage)
                issues[userpage].update(getUser(db, userid))
        db.close()
        if verbose:
            print "NOTE: Importing metas to", url
        failed = importMetas(collab, issues, template, verbose, replace)
        if failed:
            for page in failed:
                if verbose:
                    print "ERROR uploading:",  page, repr(metas[page])
                else:
                    print "ERROR uploading:", page

    else:
        parser.error(" Use -p or --tracker-path to specify the tracker configuration path.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Marko Laakso, Mika Sepp√§nen, Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import os
import sys
import re
import string
import md5
import optparse
import ConfigParser

from xml.dom import minidom

from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Func
from gzip import GzipFile

def hashfile(filename):
    print "Hashing " + filename;
    f = file(filename,'rb')     
    hash = md5.new(f.read()).hexdigest();
    f.close();

    return hash

def getText(nodelist):
    rc = ""
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc = rc + node.data
    return rc

def uploadFile(collab,page_name,filename,path):
    abspath = path + "/" + filename
    file = open(abspath, "rb")
    parts_uploaded = False
    for current, total in collab.putAttachmentChunked(page_name, filename, file):
        percent = 100.0 * current / float(max(total, 1))
        status = current, total, percent
        sys.stdout.write("\rSent %d/%d bytes (%.02f%%) " % status)
        sys.stdout.write("of %s" % filename)
        sys.stdout.flush()
        parts_uploaded = True
    if(parts_uploaded == True):
        sys.stdout.write("\n")
    else:
        sys.stdout.write("Already uploaded %s\n" % filename)
    sys.stdout.flush()
    file.close()

def parse_tool_options(page_metas):
    options = []
    tmp = []
    for opt in page_metas["Options"]:
        tmp.append(opt)
    opt_str = tmp.pop()
    options = opt_str.split('--')
    for opt in options:
        tmp = opt.split()
        if(tmp):
            opt_key = "Option "
            opt_key = opt_key + " ".join(tmp[0:1])
            opt_value = " ".join(tmp[1:])
            page_metas[opt_key].add(opt_value)

def handle_path(collab,testplan_page,dlist):
    at = re.compile('@')
    flist=[]
    page_metas=Meta()
    template = "TestRunTemplate"
    page_metas["category"].add("CategoryTestRun")
    for dir in dlist:
        flist = os.listdir(dir)
        if('summary.xml' in flist):
            print "Handling directory: " + dir
            fname = dir + '/summary.xml'
            page_metas["Summary XML"].add('[[attachment:summary.xml]]')
            testrun_page = hashfile(os.path.join(dir,'summary.xml'))
            uploadFile(collab,testrun_page,'summary.xml',dir)
            xmldoc = minidom.parse(os.path.join(dir,'summary.xml'))
            for fact in xmldoc.getElementsByTagName("fact"):
                label = fact.getAttribute("label")
                if label:
                    page_metas[label].add(getText(fact.childNodes))
            for collection in xmldoc.getElementsByTagName("collection"):
                label = collection.getAttribute("label")
                for fact in collection.getElementsByTagName("fact"):
                    page_metas[label].add(getText(fact.childNodes))
            parse_tool_options(page_metas)
            if('main.log.gz' in flist):
                pass
            elif('main.log' in flist):
                page_metas["Main Log"].add('[[attachment:main.log.gz]]')
                gzipped = GzipFile(os.path.join(dir, "main.log.gz"), "w")
                gzipped.write(open(os.path.join(dir, "main.log")).read())
                gzipped.close()
                uploadFile(collab,testrun_page,'main.log.gz',dir)
            if('run.set' in flist):
                page_metas["Settings"].add('[[attachment:run.set]]')
                uploadFile(collab,testrun_page,'run.set',dir)
            if('runinfo' in flist):
                page_metas["Settings"].add('[[attachment:runinfo]]')
                uploadFile(collab,testrun_page,'runinfo',dir)
            if('statistics.csv' in flist):
                page_metas["Statistics"].add('[[attachment:statistics.csv]]')
                uploadFile(collab,testrun_page,'statistics.csv',dir)
            if('summary.txt' in flist):
                page_metas["Summary"].add('{{attachment:summary.txt}}')
                uploadFile(collab,testrun_page,'summary.txt',dir)
            if(testplan_page is not None):
                if(at.search(testplan_page)):
                    tmp = at.sub('', testplan_page) 
                    for page in page_metas[tmp]:
                        page_metas["Test Plan"].add('[[%s]]' % page)
                else:
                    page_metas["Test Plan"].add('[[%s]]' % testplan_page)
            collab.setMeta(testrun_page, page_metas, template=template, replace=True)
            page_metas=Meta()
            page_metas["category"].add("CategoryTestRun")

def walk_dirs(path):
    dlist=[]
    for root, dirs, files in os.walk(path):
        for dir in dirs:
           dlist.append(os.path.join(root,dir)) 
    dlist.append(path)
    return dlist

def parse_config(cpath, args):
    configparser = ConfigParser.ConfigParser()
    configparser.readfp( open(cpath) )
    uris = dict( configparser.items("testrun") )
    if len(args) == 0:
        testplan_page = uris.pop("page")
        path = uris.pop("path")
        return testplan_page, path
    else:
        testplan_page = uris.pop("page")
        return testplan_page

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="cpath",
        help="Config file path.")
    parser.add_option("-i",
        action="store",
        type="string", dest="testplan_page", default=None,
        help="Specify a test plan page name to link the test runs to." )
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )
    parser.set_usage("%prog [options] WIKIURL DIRNAME")

    testplan_page = None
    options, args = parser.parse_args()
    if options.cpath:
        if len(args) == 0:
            testplan_page, path = parse_config(options.cpath, args)
        elif len(args) == 1:
            testplan_page = parse_config(options.cpath, args)
            path = args.pop()
        elif len(args) == 2:
            url, path = args
            collab = CLIWiki(url, config=options.cpath)
        if len(args) < 2:
            collab = CLIWiki(config=options.cpath)
    elif len(args) != 2:
        parser.error("Collab url, and source directory name have to be defined.")
    else:
        url, path = args
        collab = CLIWiki(url)
    if(options.testplan_page):
        testplan_page = options.testplan_page
    dlist=[]
    dlist = walk_dirs(path)
    handle_path(collab,testplan_page,dlist)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


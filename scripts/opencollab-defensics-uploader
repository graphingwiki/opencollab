#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Marko Laakso, Mika Sepp√§nen, Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import os
import sys
import re
import string
import md5
import optparse
from xml.dom import minidom
from opencollab.util.config import parse_config
from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Func
from gzip import GzipFile

def hashfile(filename):
    print "Hashing " + filename;
    f = file(filename,'rb')     
    hash = md5.new(f.read()).hexdigest();
    f.close();

    return hash

def getText(nodelist):
    rc = ""
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc = rc + node.data
    return rc

def uploadFile(collab,page_name,filename,path):
    abspath = path + "/" + filename
    file = open(abspath, "rb")
    parts_uploaded = False
    for current, total in collab.putAttachmentChunked(page_name, filename, file):
        percent = 100.0 * current / float(max(total, 1))
        status = current, total, percent
        sys.stdout.write("\rSent %d/%d bytes (%.02f%%) " % status)
        sys.stdout.write("of %s" % filename)
        sys.stdout.flush()
        parts_uploaded = True
    if(parts_uploaded == True):
        sys.stdout.write("\n")
    else:
        sys.stdout.write("Already uploaded %s\n" % filename)
    sys.stdout.flush()
    file.close()

def parse_tool_options(page_metas):
    options = []
    tmp = []
    for opt in page_metas["Options"]:
        tmp.append(opt)
    opt_str = tmp.pop()
    options = opt_str.split('--')
    for opt in options:
        tmp = opt.split()
        if(tmp):
            opt_key = "Option "
            opt_key = opt_key + " ".join(tmp[0:1])
            opt_value = " ".join(tmp[1:])
            page_metas[opt_key].add(opt_value)

def handle_path(collab,testplan_page,dlist):
    at = re.compile('@')
    flist=[]
    page_metas=Meta()
    template = "TestRunTemplate"
    page_metas["category"].add("CategoryTestRun")
    for dir in dlist:
        flist = os.listdir(dir)
        if('summary.xml' in flist):
            print "Handling directory: " + dir
            fname = dir + '/summary.xml'
            page_metas["Summary XML"].add('[[attachment:summary.xml]]')
            testrun_page = hashfile(os.path.join(dir,'summary.xml'))
            uploadFile(collab,testrun_page,'summary.xml',dir)
            xmldoc = minidom.parse(os.path.join(dir,'summary.xml'))
            for fact in xmldoc.getElementsByTagName("fact"):
                label = fact.getAttribute("label")
                if label:
                    page_metas[label].add(getText(fact.childNodes))
            for collection in xmldoc.getElementsByTagName("collection"):
                label = collection.getAttribute("label")
                for fact in collection.getElementsByTagName("fact"):
                    page_metas[label].add(getText(fact.childNodes))
            parse_tool_options(page_metas)
            if('main.log.gz' in flist):
                pass
            elif('main.log' in flist):
                page_metas["Main Log"].add('[[attachment:main.log.gz]]')
                gzipped = GzipFile(os.path.join(dir, "main.log.gz"), "w")
                gzipped.write(open(os.path.join(dir, "main.log")).read())
                gzipped.close()
                uploadFile(collab,testrun_page,'main.log.gz',dir)
            if('run.set' in flist):
                page_metas["Settings"].add('[[attachment:run.set]]')
                uploadFile(collab,testrun_page,'run.set',dir)
            if('runinfo' in flist):
                page_metas["Settings"].add('[[attachment:runinfo]]')
                uploadFile(collab,testrun_page,'runinfo',dir)
            if('statistics.csv' in flist):
                page_metas["Statistics"].add('[[attachment:statistics.csv]]')
                uploadFile(collab,testrun_page,'statistics.csv',dir)
            if('summary.txt' in flist):
                page_metas["Summary"].add('{{attachment:summary.txt}}')
                uploadFile(collab,testrun_page,'summary.txt',dir)
            if(testplan_page is not None):
                if(at.search(testplan_page)):
                    tmp = at.sub('', testplan_page) 
                    for page in page_metas[tmp]:
                        page_metas["Test Plan"].add('[[%s]]' % page)
                else:
                    page_metas["Test Plan"].add('[[%s]]' % testplan_page)
            collab.setMeta(testrun_page, page_metas, template=template, replace=True)
            page_metas=Meta()
            page_metas["category"].add("CategoryTestRun")

def walk_dirs(path):
    dlist=[]
    for root, dirs, files in os.walk(path):
        for dir in dirs:
           dlist.append(os.path.join(root,dir)) 
    dlist.append(path)
    return dlist

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
        help="Config file path.")
    parser.add_option("-d", "--testrun-directory",
                      dest="testrun_directory",
                      default=None,
                      metavar="TESTRUN-DIRECTORY",
                      help=("Directory base to search for testrun directories."))
    parser.add_option("-t", "--testplan-page",
        action="store",
        type="string", dest="testplan_page", default=None,
        metavar="TESTPLAN-PAGE",
        help="Specify a TESTPLAN-PAGE name to link the test runs to." )
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output.")
    parser.set_usage("%prog [options] WIKIURL")
    url = None
    iopts={}
    testrun_directory = None
    testplan_page = None
    options, args = parser.parse_args()
    if options.config:
        iopts = parse_config(options.config, "creds", "defensics")
        if "url" in iopts["creds"]:
            url = iopts["creds"]["url"]
        else:
            parser.error("COLLABURL needs to be specified.")
        collab = CLIWiki(url, config=options.config)
    elif len(args) != 1
        parser.error("COLLABURL needs to be specified.")
    else:
        url=args[0]
        collab = CLIWiki(url)
    if(options.testrun_directory):
        testrun_directory=options.testrun_directory 
    elif options.config and "testrun-results" in iopts["defensics"]:
        testrun_results = iopts["defensics"]["testrun-results"] 
    else:
        testrun_results = None
    if options.testplan_page:
        testplan_page = options.testplan_page
    elif options.config and "testplan-page" in iopts["defensics"]:
        testplan_page = iopts["defensics"]["testplan-page"] 
    else:
        testplan_page = None
    if testrun_results is not None:
        dlist=[]
        if(options.verbose):
             print "Walking " + testrun_results
        dlist = walk_dirs(testrun_results)
    else:
        parser.error("Testrun directory needs to be defined.")
    if(options.verbose):
        print "Handling: " + dlist
    handle_path(collab, testplan_page, dlist)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


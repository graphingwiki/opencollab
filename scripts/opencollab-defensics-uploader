#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Marko Laakso, Mika Sepp√§nen, Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import os
import sys
import re
import string
import optparse
from xml.dom import minidom
from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Func
from opencollab.util.config import parse_config
from opencollab.util.file import hashFile, uploadFile
from opencollab.util.wiki import getPages
from gzip import GzipFile

def getText(nodelist):
    rc = ""
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc = rc + node.data
    return rc

def parse_summary(dir, file='summary.xml'):
    summary_metas = Meta()
    xmldoc = minidom.parse(os.path.join(dir, file))
    for fact in xmldoc.getElementsByTagName("fact"):
        label = fact.getAttribute("label")
        if label:
            summary_metas[label].add(getText(fact.childNodes))
        for collection in xmldoc.getElementsByTagName("collection"):
            label = collection.getAttribute("label")
            for fact in collection.getElementsByTagName("fact"):
                summary_metas[label].add(getText(fact.childNodes))
    return summary_metas

def parse_tool_options(page_metas):
    options=[]
    tmp=[]
    option_metas = Meta()
    for opt in page_metas["Options"]:
        tmp.append(opt)
    opt_str = str(tmp.pop())
    options = opt_str.split('--')
    for opt in options:
        tmp = opt.split()
        if(tmp):
            opt_key = "Option "
            opt_key = opt_key + " ".join(tmp[0:1])
            opt_value = " ".join(tmp[1:])
            option_metas[opt_key].add(opt_value)
    return option_metas

def parse_notes(dir, file='notes.xml'):
    note_metas = Meta()
    xmldoc = minidom.parse(os.path.join(dir, file))
    for value in xmldoc.getElementsByTagName('value'):
        key = value.getAttribute('key')
        description = value.getAttribute('description')
        text_value = getText(value.childNodes)
        note_metas[key].add(text_value)
        kd = key + " Description"
        note_metas[kd].add(description)
    return note_metas

def handle_paths(collab,testplan_page,dirs):
    at = re.compile('@')
    flist=[]
    page_metas=Meta()
    template = "TestRunTemplate"
    page_metas["category"].add("CategoryTestRun")
    for dir in dirs:
        flist = os.listdir(dir)
        if 'summary.xml' in flist:
            print "Handling directory: " + dir
            page_metas.update(parse_summary(dir))
            fpath = os.path.join(dir, 'summary.xml')
            page_metas["Summary XML"].add('[[attachment:summary.xml]]')
            testrun_page = hashFile(fpath)
            uploadFile(collab, testrun_page, fpath, 'summary.xml')
            page_metas.update(parse_tool_options(page_metas))
            if('main.log.gz' in flist):
                pass
            elif('main.log' in flist):
                page_metas["Main Log"].add('[[attachment:main.log.gz]]')
                gzipped = GzipFile(os.path.join(dir, "main.log.gz"), "w")
                gzipped.write(open(os.path.join(dir, "main.log")).read())
                gzipped.close()
                uploadFile(collab,testrun_page, os.path.join(dir, 'main.log.gz'), 'main.log.gz')
            if('run.set' in flist):
                page_metas["Settings"].add('[[attachment:run.set]]')
                uploadFile(collab, testrun_page, os.path.join(dir, 'run.set'), 'run.set')
            if('runinfo' in flist):
                page_metas["Settings"].add('[[attachment:runinfo]]')
                uploadFile(collab, testrun_page, os.path.join(dir, 'runinfo'), 'runinfo')
            if('statistics.csv' in flist):
                page_metas["Statistics"].add('[[attachment:statistics.csv]]')
                uploadFile(collab,testrun_page, os.path.join(dir, 'statistics.csv'), 'statistics.csv')
            if('summary.txt' in flist):
                page_metas["Summary"].add('{{attachment:summary.txt}}')
                uploadFile(collab, testrun_page, os.path.join(dir, 'summary.txt'), 'summary.txt')
            if 'notes.xml' in flist:
                page_metas["Notes"].add('[[attachment:notes.xml]]')
                page_metas.update(parse_notes(dir))
                uploadFile(collab, testrun_page, os.path.join(dir, 'notes.xml'), 'notes.xml')
            if(testplan_page is not None):
                if(at.search(testplan_page)):
                    tmp = at.sub('', testplan_page) 
                    for page in page_metas[tmp]:
                        page_metas["Test Plan"].add('[[%s]]' % page)
                else:
                    page_metas["Test Plan"].add('[[%s]]' % testplan_page)
            collab.setMeta(testrun_page, page_metas, template=template, replace=True)
            page_metas=Meta()
            page_metas["category"].add("CategoryTestRun")

def walk_dirs(path):
    dlist=[]
    for root, dirs, files in os.walk(path):
        for dir in dirs:
           dlist.append(os.path.join(root,dir)) 
    return dlist

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
        help="Config file path.")
    parser.add_option("-s", "--search-string",
        action="store",
        type="string", dest="search_string", default=None,
        metavar="SEARCH-STRING",
        help="MetaTable SEARCH-STRING." )
    parser.add_option("-t", "--testplan-page",
        action="store",
        type="string", dest="testplan_page", default=None,
        metavar="TESTPLAN-PAGE",
        help="Specify a TESTPLAN-PAGE name to link the test runs to." )
    parser.add_option("-u", "--url",
        action="store",
        type="string", dest="url", default=None,
        metavar="COLLAB-URL",
        help="COLLAB-URL to connect to.")
    parser.add_option("-r",
        action="store_true", dest="recursive", default=False,
        help="Enable recursion on input directories.")
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output.")
    parser.set_usage("%prog [options] 0..N optional input directories")
    url = None
    iopts={}
    dlist=[]
    search_string = None
    testrun_directory = None
    testplan_page = None
    options, args = parser.parse_args()
    if options.config:
        iopts = parse_config(options.config, "creds", "defensics")
    if len(args) > 0:
        for arg in args:
            dlist.append(arg)
    elif options.config and "testrun-results" in iopts["defensics"]:
        dlist = (iopts["defensics"]["testrun-results"])
    else:
        if options.search_string:
            search_string = options.search_string
        elif options.config and "search-string" in iopts["defensics-uploader"]:
            search_string = iopts["defensics-uploader"]["search-string"]
        else:
            parser.error("You need to specify a testrun directory base via -d or \n \
                          via 1..N positional input directories. Use -h for help.")
    if options.testplan_page:
        testplan_page = options.testplan_page
    elif options.config and "testplan-page" in iopts["defensics"]:
        testplan_page = iopts["defensics"]["testplan-page"] 
    else:
        testplan_page = None
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    else:
        parser.error("Collab URL needs to be specified. Use -h for help.")
    if search_string is not None:
        tpages = getPages(collab, search_string)
        nro = 1
        for page in tpages:
            print ("%3d" % nro), page
            nro += 1
        sys.exit()
    if options.recursive:
        if(options.verbose):
            print "Walking ", dlist
        new_dl=[]
        for dir in dlist:
            new_dl.append(dir)
            new_dl = (walk_dirs(dir))
        a = set(new_dl)
        b = set(dlist)
        dirs = a | b 
    else:
        dirs = set(dlist)
    if(options.verbose):
        print "Handling: ", dirs
    handle_paths(collab, testplan_page, dirs)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


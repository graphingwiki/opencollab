#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    @copyright: 2008-2012 Marko Laakso, Mika Sepp√§nen, Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import re
import sys
import socket
import optparse
from gzip import GzipFile
from xml.dom import minidom
from opencollab.meta import Meta, Metas
from opencollab.util.wiki import getPages
from opencollab.util.config import parseOptions
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.file import hashFile, uploadFile

DEFENSICS_KEYS = ["Options", "Summary XML", "Settings", "Statistics",
                  "Summary", "Notes", "Test Plan"]


def getText(nodelist):
    rc = ""
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc = rc + node.data
    return rc


def parse_summary(dir, file='summary.xml'):
    summary_metas = Meta()
    xmldoc = minidom.parse(os.path.join(dir, file))
    for fact in xmldoc.getElementsByTagName("fact"):
        label = fact.getAttribute("label")
        if label:
            summary_metas[label].add(getText(fact.childNodes))
            DEFENSICS_KEYS.append(label)
    for collection in xmldoc.getElementsByTagName("collection"):
        label = collection.getAttribute("label")
        DEFENSICS_KEYS.append(label)
        for cfact in collection.getElementsByTagName("fact"):
            v = ""
            hash = cfact.getAttribute("hash")
            index = getText(cfact.childNodes)
            if hash:
                v = index + " " + hash
                summary_metas[label].add(v)
            else:
                summary_metas[label].add(index)
    return summary_metas


def mapCVSS(k, v):
    if k.startswith("cvss-"):
        k = k[5:]

    keys = {
        'AV': 'Access Vector',
        'AC': 'Access Complexity',
        'Au': 'Authentication',
        'C': 'Confidentiality',
        'I': 'Integrity',
        'A': 'Availability',
        'E': 'Exploitability',
        'RL': 'Remediation Level',
        'RC': 'Report Confidence',
        'CDP': 'Collateral Damage Potential',
        'TD': 'Target Distribution',
        'CR': 'Confidentiality Requirement',
        'IR': 'Integrity Requirement',
        'AR': 'Availability Requirement'
    }

    values = {'AV': {'L': "Local",
                     'A': "Adjacent Network",
                     'N': "Network"},
              'AC': {'H': "High",
                     'M': "Medium",
                     'L': "Low"},
              'Au': {'N': "None",
                     'S': "Single",
                     'M': "Multiple"},
              'C': {'N': "None",
                     'P': "Partial",
                     'C': "Complete"},
              'I': {'N': "None",
                     'P': "Partial",
                     'C': "Complete"},
              'A': {'N': "None",
                     'P': "Partial",
                     'C': "Complete"},
              'E': {'U': 'Unproven',
                    'P': 'Proof-of-concept',
                    'F': 'Functional',
                    'W': 'Widespread'},
              'RL': {'O': 'Official-fix',
                     'T': 'Temporary-fix',
                     'W': 'Workaround',
                     'U': 'Unavailable'},
              'RC': {'N': 'Not confirmed',
                     'U': 'Uncorroborated',
                     'C': 'Confirmed'},
              'CD': {'N': 'None',
                     'L': 'Low',
                     'LM': 'Low-Medium',
                     'MH': 'Medium-High',
                     'H': 'High'},
              'TD': {'N': 'None',
                     'L': 'Low',
                     'M': 'Medium',
                     'H': 'High'},
              'CR': {'L': 'Low',
                     'M': 'Medium',
                     'H': 'High'},
              'IR': {'L': 'Low',
                     'M': 'Medium',
                     'H': 'High'},
              'AR': {'L': 'Low',
                     'M': 'Medium',
                     'H': 'High'}
              }

    commonValues = {
        'X': 'Invalid',
        'ND': 'Not Defined'
    }

    key = keys.get(k, k)
    value = commonValues.get(v, values.get(k, dict()).get(v, v))
    return key, value


def parse_tool_options(page_metas):
    cvssre = re.compile('cvss')
    options = []
    tmp = []
    option_metas = Meta()
    for opt in page_metas["Options"]:
        tmp.append(opt)
    opt_str = str(tmp.pop())
    options = opt_str.split('--')
    for opt in options:
        opt = opt.strip()
        tmp = opt.split(" ", 1)
        if len(tmp) == 2:
            k, v = tmp
            if cvssre.search(k):
                (opt_key, opt_value) = mapCVSS(k, v)
            else:
                opt_key = "Option "
                opt_key = opt_key + k
                opt_value = v
            option_metas[opt_key].add(opt_value)
            DEFENSICS_KEYS.append(opt_key)
    return option_metas


def parse_notes(dir, file='notes.xml'):
    note_metas = Meta()
    xmldoc = minidom.parse(os.path.join(dir, file))
    for value in xmldoc.getElementsByTagName('value'):
        key = re.sub('\.', ' ', value.getAttribute('key'))
        text_value = getText(value.childNodes)
        note_metas[key].add(text_value)
        DEFENSICS_KEYS.append(key)
    return note_metas


def handle_paths(collab, testplan, dirs, progress, enable):
    flist = []
    metas = Metas()
    for dir in dirs:
        flist = os.listdir(dir)
        if 'summary.xml' in flist:
            print "Handling directory: " + dir
            fpath = os.path.join(dir, 'summary.xml')
            testrun = hashFile(fpath)
            metas[testrun].update(parse_summary(dir))
            metas[testrun]["Summary XML"].add('[[attachment:summary.xml]]')
            uploadFile(collab, testrun, fpath, 'summary.xml', progress)
            if enable:
                metas[testrun].update(parse_tool_options(metas[testrun]))
            else:
                metas[testrun]["Options"].clear()
            if('main.log.gz' in flist):
                uploadFile(collab, testrun, os.path.join(dir, 'main.log.gz'), 'main.log.gz', progress)
            elif('main.log' in flist):
                metas[testrun]["Main Log"].add('[[attachment:main.log.gz]]')
                gzipped = GzipFile(os.path.join(dir, "main.log.gz"), "w")
                gzipped.write(open(os.path.join(dir, "main.log")).read())
                gzipped.close()
                uploadFile(collab, testrun, os.path.join(dir, 'main.log.gz'), 'main.log.gz', progress)
            if('run.set' in flist):
                metas[testrun]["Settings"].add('[[attachment:run.set]]')
                uploadFile(collab, testrun, os.path.join(dir, 'run.set'), 'run.set', progress)
            if('runinfo' in flist):
                metas[testrun]["Settings"].add('[[attachment:runinfo]]')
                uploadFile(collab, testrun, os.path.join(dir, 'runinfo'), 'runinfo', progress)
            if('statistics.csv' in flist):
                metas[testrun]["Statistics"].add('[[attachment:statistics.csv]]')
                uploadFile(collab, testrun, os.path.join(dir, 'statistics.csv'), 'statistics.csv', progress)
            if('summary.txt' in flist):
                metas[testrun]["Summary"].add('{{attachment:summary.txt}}')
                uploadFile(collab, testrun, os.path.join(dir, 'summary.txt'), 'summary.txt', progress)
            if 'notes.xml' in flist:
                metas[testrun]["Notes"].add('[[attachment:notes.xml]]')
                metas[testrun].update(parse_notes(dir))
                uploadFile(collab, testrun, os.path.join(dir, 'notes.xml'), 'notes.xml', progress)
            if testplan is not None:
                metas[testrun]["Test Plan"].add('[[%s]]' % testplan)
            else:
                metas[testrun]["Test Plan"].add("FixMe")
            metas[testrun]["gwikicategory"].add("CategoryTestRun")
            metas[testrun]["gwikitemplate"].add("TestRunTemplate")
    return metas


def walk_dirs(path):
    dlist = []
    for root, dirs, files in os.walk(path):
        for dir in dirs:
            dlist.append(os.path.join(root, dir))
    return dlist


def main():
    parser = optparse.OptionParser()
    parser.add_option("-E", "--enable-summary-option-parsing", action="store_true", dest="enable",
        default=False, help="Enable parsing summary.xml options. N.B. these can be *very* lengthy!")
    parser.add_option("-n", "--testplan-page-name", action="store",
        type="string", dest="testplan", default=None,
        metavar="TESTPLAN-PAGE", help="Specify a TESTPLAN-PAGE name to link the test runs to.")
    parser.add_option("-p", "--prompt", action="store_true",
        dest="prompt", default=False,
        help="Prompt for selecting the test plan from search results obtained via -s.")
    parser.add_option("-P", "--progress", action="store_true",
        dest="progress", default=False, help="Display file upload progress information.")
    parser.add_option("-r", action="store_true", dest="recursive", default=False,
        help="Enable recursion on input directories.")
    parser.set_usage("%prog [options] <1..N input directories>")
    dlist = []
    sect = "defensics"
    ops = {}
    metas = Metas()
    ops = parseOptions(parser, sect, search=True)
    url = ops["creds"]["url"]
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    progress = ops[sect]["progress"]
    verbose = ops[sect]["verbose"]
    dlist = ops[sect]["args"]
    if len(dlist) < 1:
        parser.error("You must supply 1..N input directories. Use -h for help.")
    search_string = ops[sect]["search"]
    testplan = ops[sect]["testplan"]
    enable = ops[sect]["enable"]
    if verbose:
        print "Authenticating to: " + repr(url)
    while True:
        try:
            collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if search_string is not None:
        if not re.search(search_string, '\|\|.*\|\|'):
            search_string += ',|| ||'
        tpages = getPages(collab, search_string)
        nro = 0
        for page in tpages:
            msg = ""
            msg += "%3d %s" % (nro, page)
            for metakey, metavalue in tpages[page].iteritems():
                msg += " %s:%s" % (metakey, "/".join(metavalue))
            print "%s" % msg
            nro += 1
        if ops[sect]["prompt"]:
            nro -= 1
            cont = True
            pnames = tpages.items()
            while cont:
                print "Enter your selection or q to quit: "
                tmp = sys.stdin.readline().strip()
                if(tmp == "q"):
                    sys.exit()
                try:
                    answer = int(tmp)
                except ValueError:
                    print "Your selection must be between 0 and ", nro
                else:
                    if((answer >= 0) and (answer <= nro)):
                        testplan = pnames[answer][0]
                        cont = False
                    else:
                        print "Your selection must be between 0 and ", nro
    if ops[sect]["recursive"]:
        if(verbose):
            print "Walking ", dlist
        new_dl = []
        for dir in dlist:
            new_dl.append(dir)
            new_dl = (walk_dirs(dir))
        a = set(new_dl)
        b = set(dlist)
        dirs = a | b
    else:
        dirs = set(dlist)
    if(verbose):
        print "Handling: ", dirs
    metas = handle_paths(collab, testplan, dirs, progress, enable)
    if verbose:
        print "NOTE: Importing metas to", url
    cleared = Meta()
    known_keys = set(DEFENSICS_KEYS)
    for page, meta in metas.iteritems():
        cleared[page].update(known_keys)
    collab.incSetMeta(cleared, Metas(), metas)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

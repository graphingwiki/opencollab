#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Get pages from a collab with MetaTable args and zip up the
    page html and attachments to a zip archive supplied through
    arg[0].

    @copyright: 2012 by Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import locale
import socket
import optparse
import tempfile
import opencollab.wiki
from zipfile import ZipFile
from opencollab.wiki import CLIWiki
from opencollab.wiki import WikiFailure
from opencollab.util.config import parseOptions
from opencollab.util.file import downloadFile

def main():
    parser = optparse.OptionParser()
    parser.add_option("-P", "--progress",
        dest="progress", action="store_true", default=False,
        help="Show attachment download progress.")
    parser.set_usage("usage: %prog [options] ZIPFILE")
    ops = {}
    sect = "get-pages"
    ops = parseOptions(parser, sect, config=False, template=True, search=True)
    url = ops["creds"]["url"]
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    verbose = ops[sect]["verbose"]
    args = ops[sect]["args"]
    if len(args) < 1:
        sys.exit("You need to speficy a zip file to create.")
    dstfile = args[0]
    search = ops[sect]['search']
    if search is None:
        parser.error("MetaTable search string needs to be specified. Use -h for help.")

    if verbose:
        print "Authenticating to SRC URL:", url
    while True:
        try:
            src_collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    try:
        search = unicode(search, locale.getpreferredencoding())
    except UnicodeDecodeError:
        sys.stdout.write("ERROR: Could not understand system default encoding")
        sys.exit(1)

    if verbose:
        print "NOTE: Getting pages from", url, "with", repr(search)
    metas = src_collab.getMeta(search)

    basedir = tempfile.mkdtemp(prefix="temp")
    zipfile = ZipFile(dstfile, 'w')
    for page, v in metas.iteritems():
        content = ""
        content += '<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html;charset=utf-8">'
        content += '\n<title></title>\n</head>\n<body>'
        if verbose:
            print "NOTE: Handling page", page
        try:
            content += src_collab.getPageHTML(page)
        except opencollab.wiki.WikiFailure, (strerror):
            print "ERROR:", strerror
            continue
        else:
            if verbose:
                print "NOTE: Getting page content for", page, "succeeeded."
        content += "\n</body>\n</html>"
        zf = []
        zf = page.split('/')
        zfile = page + "/" + '-'.join(zf) + '.html'
        zipfile.writestr(zfile, content.encode("utf-8"))
        if verbose:
            print "NOTE: downloading attachments for page", page
        attachments = src_collab.listAttachments(page)
        dpath = os.path.abspath(basedir + "/" + page)
        if not dpath.startswith(basedir):
            sys.exit("%s not under temporary base directory." % dpath)
        try:
            os.makedirs(dpath)
        except OSError, error:
            sys.exit("ERROR: Couldn't create directory %s" % dpath)
        else:
            if verbose:
                print "NOTE: Created temporary directory", dpath
        for num, attachment in enumerate(attachments):
            try:
                downloadFile(src_collab, page, attachment, dpath, verbose)
            except IOError, error:
                sys.exit(error)
        for num, wikiname in enumerate(attachments):
            file = os.path.join(dpath, wikiname)
            zfile = page + "/" + wikiname
            zipfile.write(file, zfile)
            try:
                os.unlink(file)
            except OSError:
                print "ERROR: Couldn't remove", file
            else:
                if verbose:
                    print "NOTE: Removed", file, "successfully."
        try:
            os.removedirs(dpath)
        except OSError:
            print "ERROR: Couldn't remove directory", dpath
        else:
            if verbose:
                print "NOTE: Removed", dpath, "successfully."

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


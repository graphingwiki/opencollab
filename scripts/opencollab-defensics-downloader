#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Marko Laakso, Mika Sepp√§nen, Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import os
import re
import sys
import gzip
import string
import time
import optparse
from opencollab.wiki import CLIWiki
from opencollab.meta import Metas
from opencollab.util.config import parseConfig
from opencollab.util.wiki import getPages
from opencollab.util.file import downloadFile

def decompressFile(path, file):
    ifile = os.path.join(path, file)
    ofile = os.path.join(path, "main.log")
    try:
        gf = gzip.open(ifile, "rb")
    except IOError:
        error = "Couldn't open " + ifile + " for reading."
        sys.exit(error) 
    try:
        df = open(ofile, "wb")
    except IOError:
        error = "Couldn't open " + ofile + " for writing."
        sys.exit(error) 
    try:
        df.writelines(gf)
    except IOError:
        error = "Write to " + ofile + " failed."
        sys.exit(error) 
    df.close()
    gf.close()

def create_dir(results_dir, suite_name, ts):
    ds = "%d" % time.time()
    ds = ts.single(ds)
    date, times = ds.split()
    mod_time = re.sub(':', '-', times)
    dname = date + '-' + mod_time
    new_dir = os.path.join(results_dir, suite_name.single(), dname)
    if not os.path.exists(new_dir):
        try:
            os.makedirs(new_dir)
        except os.error:
            error = "Couldn't create: ", new_dir
            sys.exit(error)
    return new_dir

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
        help="Config file path.")
    parser.add_option("-s", "--search-string",
        action="store",
        type="string", dest="search_string", default=None,
        metavar="SEARCH-STRING",
        help="MetaTable SEARCH-STRING." )
    parser.add_option("-u", "--url",
        action="store",
        type="string", dest="url", default=None,
        metavar="COLLAB-URL",
        help="COLLAB-URL to connect to.")
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output.")
    parser.set_usage("%prog [options]  Defensics results directory")
    url = None
    iopts={}
    search_string = None
    results_dir = None
    pages = Metas()
    options, args = parser.parse_args()
    if options.config:
        iopts = parseConfig(options.config, "creds", "defensics-downloader")
    if len(args) > 0:
        results_dir = args.pop()
    elif options.config and "testrun-results" in iopts["defensics-downloader"]:
        results_dir = (iopts["defensics-downloader"]["testrun-results"])
    else:
        parser.error("You need to specify a testrun directory via a\n \
                      positional argument or configuration file variable. Use -h for help.")
    if options.search_string:
        search_string = options.search_string
    elif options.config and "search-string" in iopts["defensics-downloader"]:
        search_string = iopts["defensics-downloader"]["search-string"]
    else:
        parser.error("You need to specify a MetaTable search string.\n \
                      Use -h for help.")
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    else:
        parser.error("Collab URL needs to be specified.\n \
                      Use -h for help.")
    if options.verbose:
        print "NOTE: Getting pages with:", search_string, "\nfrom", url
    pages.update(getPages(collab, search_string))
    if options.verbose:
        print "NOTE: Downloading testrun results to:", results_dir
    for page in pages:
        if pages[page]["Summary XML"]:
            suite_name = pages[page]["Test suite name"]
            ts = pages[page]["Test run started"]
            dpath = create_dir(results_dir, suite_name, ts)
            if options.verbose:
                print "NOTE: Download destination is", dpath
            attachments = collab.listAttachments(page)
            for attachment in attachments:
                downloadFile(collab, dpath, page, attachment)
            if options.verbose:
                print "NOTE: Decompressing main.log.gz"
            decompressFile(dpath, "main.log.gz")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

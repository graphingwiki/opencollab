#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2011 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import sys
import socket
import optparse
from opencollab.wiki import CLIWiki, WikiFailure, WikiFault
from opencollab.meta import Meta, Metas
from opencollab.util.config import parseOptions

GROUP_KEYS = [
    'product', 'type', 'group type',
    'customer',
]


def read_file(ifile):
    content = ""
    try:
        f = open(ifile, 'r')
        content = f.read()
        f.close()
    except IOError:
        print "Couldn't read input file: ", sys.exc_info()[0]
    return content


def formatGroupPage():
    page = "#acl SupportGroup:admin,revert,read,write,delete,invite All:none\n"
    page += "<<TableOfContents>>\n= @PAGE@ =\n\n"
    page += "{{{#!wiki note\nThis group page is visible only to the SupportGroup. It is used for access control.\n}}}\n"
    page += "= Metadata =\n"
    page += "\n----\n<<LinkedIn>>\n----\n"
    return page


def main():
    parser = optparse.OptionParser()
    parser.set_usage("%prog [options] input_file")
    metas = Metas()
    sect = "group"
    ops = parseOptions(parser, sect)
    url = ops["creds"]["url"]
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    verbose = ops[sect]["verbose"]
    args = ops[sect]["args"]
    if len(args) != 1:
        parser.error("You must supply an input file.")
    input_file = args[0]
    if verbose:
        print "Authenticating to: " + repr(url)
    while True:
        try:
            collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Collab connection failed.")
        else:
            break
    content = read_file(input_file)
    lines = content.split("\n")
    pagecontent = formatGroupPage()
    for l in lines:
        metas[l]["type"].add("customer")
        metas[l]["gwikitemplate"].add("IdentityTemplate")
        metas[l]["gwikicategory"].add("CategoryIdentity")
        lgroup = l + "/LicenseGroup"
        if verbose:
            print "Editing page: ", lgroup
        try:
            collab.putPage(lgroup, pagecontent)
        except WikiFault:
            pass
        metas[lgroup]["customer"].add('[[%s]]' % l)
        metas[lgroup]["group type"].add("customer")
        metas[lgroup]["gwikicategory"].add('CategoryGroup')
    if verbose:
        print "NOTE: Updating metas to", url
    cleared = Meta()
    discarded = Metas()
    for page, meta in metas.iteritems():
        for k in GROUP_KEYS:
            cleared[page].add(k)
        #discarded[page]["key"].add("value")
    collab.incSetMeta(cleared, discarded, metas)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

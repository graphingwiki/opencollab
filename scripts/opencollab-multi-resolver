#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import re, socket, optparse, subprocess, IPy
from subprocess import Popen
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.meta import Meta, Metas
from opencollab.util.network import dns_blacklist, mr_attributes
from opencollab.util.regexp import *
from opencollab.util.config import parseOptions

MR_KEYS = [
    'A', 'AAAA', 'ALLOCATED', 'AS', 'AS-NAME', 'ATTRIBUTION',
    'BGP-PREFIX', 'CC', 'CNAME', 'ISP', 'MX0', 'MX10', 'MX100',
    'MX1000', 'MX11', 'MX110', 'MX15', 'MX19', 'MX2', 'MX20',
    'MX200', 'MX3', 'MX30', 'MX300', 'MX40', 'MX400', 'MX42',
    'MX5', 'MX50', 'MX60', 'MX69', 'MX90', 'MX900', 'MX999',
    'NETWORK', 'NS', 'PTR', 'REGISTRY', 'SOA', 'SOA-EMAIL',
    'SOA-EXPIRE', 'SOA-MINIMUM', 'SOA-REFRESH', 'SOA-RETRY',
    'SOA-SERIAL', 'SRV', 'TYPE' 
]

def shred_triplets(resolved): 
    collab_metas = Metas()
    for triplet in resolved:
        if triplet:
            subj, pred, obj = triplet.split(';')
            if pred in mr_attributes:
                collab_metas[subj][pred].add(obj)
            else:
                collab_metas[subj][pred].add('[[%s]]' % obj)
            collab_metas[subj]["gwikicategory"].add('CategoryIdentity')
            collab_metas[subj]["gwikitemplate"].add('IdentityTemplate')
    return collab_metas

def expand_ipv4(rr,new):
    new.append(rr + ";PTR")
    rev = re.split('\.', rr) 
    rev.reverse()
    new.append('.'.join(rev) + ".origin.asn.cymru.com;TXT")

def expand_ipv6(rr,new):
    rev = []
    comprr = IPy.IP(rr).strCompressed()
    exprr = IPy.IP(rr).strFullsize()
    new.append(comprr + ";PTR")
    parts = re.split(':', exprr)
    for s in parts:
        part = re.findall('[\d\w]', s)
        part.reverse()
        rev.append('.'.join(part))
    rev.reverse()
    addr = '.'.join(rev)
    new.append(addr + ".origin6.asn.cymru.com;TXT")

def expand_as(rr,new):
    new.append(rr.upper() + ".asn.cymru.com;TXT")

def expand_name(rr,new):
    new.append(rr + ";A")
    new.append(rr + ";AAAA")
    new.append(rr + ";MX")
    new.append(rr + ";SOA")

def expand_srv(rr,new):
    new.append("_xmpp-client._tcp." + rr + ";SRV")
    new.append("_xmpp-server._tcp." + rr + ";SRV")
    new.append("_jabber._tcp." + rr + ";SRV")
    new.append("_sips._tcp." + rr + ";SRV")
    new.append("_sip._tcp." + rr + ";SRV")
    new.append("_sip._udp." + rr + ";SRV")
    new.append("_stuns._tcp." + rr + ";SRV")
    new.append("_stun._tcp." + rr + ";SRV")
    new.append("_stun._udp." + rr + ";SRV")

def resolve_requests(expanded,mresolve):
    mr = Popen(mresolve, shell=True, stdin=subprocess.PIPE, 
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=1)
    for rr in expanded:
        mr.stdin.write(rr + '\n')
    (sout, err) = mr.communicate()
    return sout, err

def generate_requests(resolved,new):
    expanded = []
    rr_type = re.compile(';TYPE;')
    ipv6_re = re.compile(':')
    for triplet in new.split('\n'):
        if triplet:
            subj, pred, obj = triplet.split(';')
            if subj in dns_blacklist:
                continue
        if rr_type.search(triplet):
            if triplet not in resolved:
                try:
                    socket.inet_pton(socket.AF_INET, subj)
                except socket.error:
                    try:
                        socket.inet_pton(socket.AF_INET6, subj)
                    except socket.error:
                        if dns_re.search(subj):
                            expand_name(subj,expanded)
                        elif as_re.search(subj):
                            expand_as(subj,expanded)
                    else:
                        expand_ipv6(subj,expanded)
                else:
                    expand_ipv4(subj,expanded)
        resolved.add(triplet)
    return expanded, resolved

def seed_initial(new,srv): 
    expanded = []
    resolved = set([])
    for rr in new:
        try:
            socket.inet_pton(socket.AF_INET, rr)
        except socket.error:
            try:
                socket.inet_pton(socket.AF_INET6, rr)
            except socket.error:
                if dns_re.search(rr):
                    resolved.add(rr + ";TYPE;NAME")
                    expand_name(rr,expanded)
                    if srv:
                        expand_srv(rr,expanded)
                elif as_re.search(rr):
                    resolved.add(rr.upper() + ";TYPE;AS")
                    expand_as(rr,expanded)
            else:
                resolved.add(rr + ";TYPE;IPv6")
                expand_ipv6(rr,expanded)
        else:
            resolved.add(rr + ";TYPE;IPv4")
            expand_ipv4(rr,expanded)
    return expanded, resolved

def read_input():
    new = []
    for line in sys.stdin:
        new.append(line.strip())
    return new

def main():
    parser = optparse.OptionParser()
    parser.add_option("-m", "--mresolve-path",
        dest="mresolvepath", default="/usr/bin/mresolve", metavar="MRESOLVE-PATH",
        help=("MRESOLVE-PATH. defaults to /usr/bin/mresolve."))
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option("-r", "--recurse",
        action="store_true", dest="recurse", default=False,
        help="Perform queries recursively." )
    parser.add_option("-S", "--SRV",
        action="store_true", dest="srv", default=False,
        help="Perform SRV queries on names in the initial data set (xmpp,sip)." )
    parser.set_usage("%prog [options]")
    types = set(("NAME", "IPv4", "AS"))
    metas = Metas()
    new = []
    ops = {}
    sect = "multi-resolver"
    ops = parseOptions(parser, sect, search=True)
    url=ops["creds"]["url"]
    verbose = ops[sect]["verbose"]
    mresolvepath=ops[sect]["mresolvepath"]
    replace = ops[sect]["lasteditwins"]
    search = ops[sect]["search"]
    recurse = ops[sect]["recurse"]
    srv = ops[sect]["srv"]
    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if search is None:
        if verbose:
            print "Reading input identities from STDIN."
        new = read_input()
    else:
        if verbose:
            print "Fetching identities from collab."
        pages = collab.getMeta(search)
        for page in pages:
            try:
                type = pages[page]["TYPE"].single() 
            except ValueError:
                print "ERROR:", page, "has no type."
            else:
                if type in types:
                    new.append(page)
                else:
                    print "ERROR:", page, "'s type is not supported."
    if not new:
        if verbose:
            print "No input identities, no work. Exiting."
        sys.exit()
    if verbose:
        print "Expanding initial requests."
    expanded,resolved = seed_initial(new,srv)
    if recurse:
        if verbose:
            print "Resolving requests recursively."
        while expanded:
            new,err = resolve_requests(expanded,mresolvepath)
            if verbose:
                print err
            expanded,resolved = generate_requests(resolved,new)
    else:
        if verbose:
            print "Resolving requests."
        new,err = resolve_requests(expanded,mresolvepath)
        for triplet in new.split('\n'):
            resolved.add(triplet)
    if verbose:
        print "Shredding resolved RDF triplets."
    metas.update(shred_triplets(resolved))
    if verbose:
        print "Importing resolved identities to collab." 
    cleared = Meta()
    if replace:
        for page, meta in metas.iteritems():
            cleared[page] = MR_KEYS
    collab.incSetMeta(cleared, Metas(), metas)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

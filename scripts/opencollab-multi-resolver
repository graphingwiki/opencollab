#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import re
import sys
import string
import socket
import optparse
import ConfigParser
import subprocess
from opencollab.wiki import CLIWiki
from opencollab.meta import Metas, Meta, Func
from subprocess import Popen
#from opencollab.util.network import dns_blist

def import_identities():
    pass

def expand_ipv4(rr,new):
    new.append(rr + ";PTR")
    rev = re.split('\.', rr) 
    rev.reverse()
    new.append('.'.join(rev) + ".origin.asn.cymru.com;TXT")

def expand_as(rr,new):
    new.append(rr + ".asn.cymru.com;TXT")

def expand_name(rr,new):
    new.append(rr + ";A")
    new.append(rr + ";MX")
    new.append(rr + ";SOA")

def generate_requests(resolved):
    pass

def resolve_requests(new,mresolve):
    mr = Popen(mresolve, shell=True, stdin=subprocess.PIPE, 
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=1)
    for rr in new:
        mr.stdin.write(rr + '\n')
    (sout, err) = mr.communicate()
    return sout, err

def seed_initial(rlist,resolved,new): 
    dns_name = re.compile('\w\.\w')
    asn = re.compile('^(as|AS)\d{1,}$')
    for rr in rlist:
        try:
            socket.inet_aton(rr)
        except socket.error:
            if dns_name.search(rr):
                resolved[rr]["TYPE"].add("NAME")
                expand_name(rr,new)
            elif asn.search(rr):
                resolved[rr]["TYPE"].add("AS")
                expand_as(rr,new)
            else:
                pass
        else:
            resolved[rr]["TYPE"].add("IPv4")
            expand_ipv4(rr,new)

def read_input(rlist):
    for line in sys.stdin:
        rlist.append(line.strip())
    return rlist

def parse_config(cpath, args):
    configparser = ConfigParser.ConfigParser()
    configparser.readfp( open(cpath) )
    uris = dict( configparser.items("multi-resolver") )
    path = uris.pop("path")
    return path

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="cpath",
        help="Config file path.")
    parser.add_option("-v",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )
    parser.set_usage("%prog [options] COLLAB_URL MRESOLVE_PATH")

    options, args = parser.parse_args()
    if options.cpath:
        if len(args) == 0:
            path = parse_config(options.cpath, args)
        elif len(args) == 1:
            path = args.pop()
        collab = CLIWiki(config=options.cpath)
    elif len(args) != 2:
        parser.error("Collab URL and mresolve path need to be defined.")
    else:
        url, path = args
        collab = CLIWiki(url)

    resolved = Metas()
    rlist = []
    new = []
    read_input(rlist)
    seed_initial(rlist,resolved,new)
    out,err = resolve_requests(new,path)
    print out

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

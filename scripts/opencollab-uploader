#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 by Joachim Viide, Pekka Pietikäinen, Mika Seppänen  
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
from opencollab.wiki import CLIWiki
from opencollab.meta import Meta
from opencollab.util.config import parse_config
import os
import sys
import optparse
import ConfigParser
from urllib import quote

def uploadFile(wiki, page, filename, path):
    file = open(path, "rb")

    for current, total in wiki.putAttachmentChunked(page, filename, file):
        percent = 100.0 * current / float(max(total, 1))
        status = current, total, percent

        sys.stdout.write("\rsent %d/%d bytes (%.02f%%) " % status)
        sys.stdout.flush()

    sys.stdout.write("done\n")
    sys.stdout.flush()

    file.close()

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
                      action="store",
                      type="string", dest="config",
                      metavar="CONFIG",
                      help="CONFIG file path.")
    parser.add_option("-f", "--file",
                      dest="path",
                      default=None,
                      metavar="FILE",
                      help="Input FILE or path.")
    parser.add_option("-o", "--output",
                      dest="output",
                      default=None,
                      metavar="OUTPUT",
                      help="Save the file to name OUTPUT in the wiki.")
    parser.add_option("-p", "--page",
                      dest="page",
                      default=None,
                      metavar="PAGE",
                      help="Upload the file(s) to PAGE.")
    parser.add_option("-r", "--recursive",
                      action="store_true",
                      dest="recursive",
                      help="recursivly upload files")
    parser.set_usage("%prog [options] WIKIURL")

    options, args = parser.parse_args()
    iopts={}
    if options.config:
        iopts = parse_config(options.config, "creds", "uploader")
        if "url" in iopts["creds"]:
            url = iopts["creds"]["url"]
            collab = CLIWiki(url, config=options.config)
        else:
            parser.error("COLLABURL needs to specified.")
    elif len(args) != 1:
        parser.error("COLLABURL needs to be specified.")
    else:
        url=args[0]
        collab = CLIWiki(url)
    if options.path:
        path = options.path
    elif options.config and "path" in iopts["uploader"]:
        path = iopts["uploader"]["path"]
    else:
        path = None
    if options.output:
        output = options.output
    elif options.config and "output" in iopts["uploader"]:
        output = iopts["uploader"]["output"]
    else:
        output = None
    if options.page:
        page = options.page
    elif options.config and "page" in iopts["uploader"]:
        page = iopts["uploader"]["page"]
    else:
        parser.error("Collab page to upload to needs to be specified.")

    if options.recursive:
        filelist = list()
        if os.path.isfile(path):
            wikiname = quote(path, safe="")
            filelist.append((path, wikiname))
        else:
            for root, dirs, files in os.walk(path):
                for file in files:
                    filename = os.path.join(root, file)
                    wikiname = filename[len(os.path.dirname(path)):].lstrip("/")
                    wikiname = quote(wikiname, safe="")
                    filelist.append((filename, wikiname))

        total = len(filelist)
        n = 1
        for filename, wikiname in filelist:
            sys.stdout.write("%d/%d uploading %s as %s\n" % (n, total, filename, wikiname)) 
            uploadFile(wiki, page, wikiname, filename)
            n += 1 

        sys.exit()

    if options.output is None:
        _, filename = os.path.split(path)
    else:
        filename = options.output

    sys.stdout.write("uploading %s as %s\n" % (path, filename)) 
    sys.stdout.flush()
    uploadFile(wiki, page, filename, path)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


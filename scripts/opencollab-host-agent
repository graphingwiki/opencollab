#!/usr/bin/python

import sys,re,os
import optparse

from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Func

from opencollab.util.config import parse_config


def dfinfo(info):


   df = '/bin/df'
   w,r = os.popen2('%s -lk' %(df))
   w.close()
   i=0
   for line in r.readlines():
      if i == 0:
         i += 1
         continue
      columns = re.split("\s+",line)
      device = columns[0]
      size = columns[3]
      full = columns[4]
      mountpoint = columns[5]
      info.append(("disk-%s-device" % str(i), device))
      info.append(("disk-%s-size" % str(i), size))
      info.append(("disk-%s-full" % str(i) ,full))

      i += 1
   r.close()
   return info

def ifconfiginfo(info):
   ## ifconfig
   if os.path.exists('/sbin/ifconfig'): ifconfig = '/sbin/ifconfig'
   if os.path.exists('/bin/ifconfig'): ifconfig = '/bin/ifconfig'
   w,r = os.popen2('%s -a' %(ifconfig))
   ifconfig_output = r.read()
   r.close()
   w.close()
   
   ipregexp = "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
   macregexp = "([^:]{1,2}:[^:]{1,2}:[^:]{1,2}:[^:]{1,2}:[^:]{1,2}:[^:]{1,2})"
   macs= re.findall(macregexp,ifconfig_output,re.S)
   ips = re.findall(ipregexp,ifconfig_output,re.S)

   for mac in macs: 
      info.append(("ifconfig-mac",mac))
   for ip in ips:     
      info.append(("ifconfig-ip", ip))

   return info
def getOSXInfo():
   info = []
   info = dfinfo(info)
   info = ifconfiginfo(info)

   w,r = os.popen2('system_profiler SPHardwareDataType')
   system_profiler_output=r.read()
   r.close()
   w.close()
   hardwarere = "Model Identifier:\s(\S+).*?"+ \
       "Processor Name: ([^\n].*?)\n" + \
       ".*?Total Number Of Cores: ([^\n].*?)\n" + \
       ".*?Memory: ([^\n].*?)\n" + \
       ".*?Serial Number: ([^\n].*?)\n" 
   (model, processor, cpus, memory, serial) = re.findall(hardwarere,system_profiler_output,re.S)[0]

   info.append(("cores", cpus))
   info.append(("cpu model", processor))
   info.append(("Model", model))
   info.append(("Total memory", memory))
   info.append(("Serial", serial))

   return info

def getLinuxInfo():

   info = []
   cpuinfo = open('/proc/cpuinfo','r').read()
   cpu_number = re.findall("cpu cores\s+:(.*)",cpuinfo)[0]
   cpu_model = re.findall("model name\s+:(.*)",cpuinfo)[0]

   info.append(('cores', cpu_number))
   info.append(('cpu model', cpu_model))
   
   
   meminfo = open('/proc/meminfo','r').read()
   memtotal = re.findall("MemTotal:\s+(.*)",meminfo)[0]

   info.append(('Total memory', memtotal))

   ## df

   info = dfinfo(info)
   info = ifconfiginfo(info)

   return info
def main():

    parser = optparse.OptionParser()

    parser.add_option( "-c", "--config",
                       action="store",
                       type="string", dest="config",
                       help="Config file path.")

    parser.add_option("-u", "--url",
        action="store",
        type="string", dest="url", default=None,
        metavar="COLLAB-URL",
        help="COLLAB-URL to connect to.")

    options, args = parser.parse_args()
    parser.set_usage("%prog [options] <my hostname>")

    if options.config:
        iopts = parse_config(options.config, "creds", "opencollab-host-agent")

  
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
        
    else:
        parser.error("Collab URL needs to be specified. Use -h for help.")

    if len(args) != 1:
        sys.stderr.write("Please define hostname\n")
        sys.exit(1)

    page = args[0]
    if sys.platform == 'linux2':
      info  = getLinuxInfo()

    elif sys.platform == 'darwin':
       info = getOSXInfo()
    else:
       sys.stderr.write("Unsupported platform %s." % (sys.platform)) 

    
    metas = Meta()
    metas['platform'] = sys.platform

       
    for key,value in info:
       metas[key].add(value)
    metas["category"].add("CategoryContainer")

    collab.setMeta(page,metas)
    
if __name__ == "__main__":
    try:
       main()
    except KeyboardInterrupt:
       print "Script interrupted via CTRL-C."

					        




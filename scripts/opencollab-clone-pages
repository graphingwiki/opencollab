#! /usr/bin/env python
# -*- coding: latin-1 -*-
"""
    @copyright: 2008-2012 by Jani Kenttälä and Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import locale
import optparse
import tempfile
import socket
import opencollab.wiki
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.config import parseOptions
from opencollab.util.file import downloadFile, uploadFile


def main():
    parser = optparse.OptionParser()
    parser.add_option("-d", "--destination-url",
        dest="destination", default=None, metavar="DSTURL",
        help="Destination collab DSTURL.")
    parser.add_option("-n", "--dry-run",
        dest="dryrun", action="store_true", default=False,
        help="show what would have been cloned")
    parser.add_option("-P", "--progress",
        dest="progress", action="store_true", default=False,
        help="Show attachment upload progress.")
    parser.add_option("-m", "--move",
        dest="move", action="store_true", default=False,
        help="move (delete source page)")
    parser.set_usage("usage: %prog [options]")
    ops = {}
    sect = "clone"
    ops = parseOptions(parser, sect, config=True, search=True)
    url = ops["creds"]["url"]
    dsturl = ops[sect]["destination"]
    verbose = ops[sect]["verbose"]
    search = ops[sect]["search"]
    progress = ops[sect]["progress"]
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    dryrun = ops[sect]["dryrun"]
    if dryrun:
        verbose = True

    if search is None:
        parser.error("MetaTable search string needs to be specified. Use -h for help.")

    print "Authenticating to SRC URL:", url

    while True:
        try:
            src_collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    ops['creds']['url'] = dsturl

    print "Authenticating to DST URL:", dsturl

    while True:
        try:
            dst_collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    try:
        search = unicode(search, locale.getpreferredencoding())
    except UnicodeDecodeError:
        sys.stdout.write("ERROR: Could not understand system default encoding")
        sys.exit(1)

    if verbose:
        print "NOTE: Getting pages from", url, "with", repr(search)
    metas = src_collab.getMeta(search)

    for page, v in metas.iteritems():
        content = ""
        if verbose:
            print "NOTE: Handling page", page
        if not dryrun:
            try:
                content = src_collab.getPage(page)
            except opencollab.wiki.WikiFailure, (strerror):
                print "ERROR:", strerror
                continue
            else:
                if verbose:
                    print "NOTE: Getting page content for", page, "succeeeded."
            if verbose:
                print "NOTE: downloading attachments for page", page
            attachments = src_collab.listAttachments(page)

            tempdir = tempfile.mkdtemp(prefix="opencollab")
            if verbose:
                print "NOTE: Created temporary directory", tempdir

            for num, attachment in enumerate(attachments):
                try:
                    downloadFile(src_collab, page, attachment, tempdir, verbose)
                except IOError, error:
                    sys.exit(error)
            if verbose:
                print "NOTE: creating page", page, "in", dsturl
            try:
                dst_collab.putPage(page, content)
            except opencollab.wiki.WikiFailure, (strerror):
                print "ERROR: Couldn't create page", repr(page), strerror
                pass
            else:
                print "NOTE: Page", page, "created successfully."
            if verbose:
                print "NOTE: Uploading attachments to page", page
            for num, wikiname in enumerate(attachments):
                file = os.path.join(tempdir, wikiname)
                uploadFile(dst_collab, page, file, wikiname, progress)
                try:
                    os.unlink(file)
                except OSError:
                    print "ERROR: Couldn't remove", file
                else:
                    if verbose:
                        print "NOTE: Removed", file, "successfully."
            try:
                os.rmdir(tempdir)
            except OSError:
                print "ERROR: Couldn't remove directory", tempdir
            else:
                if verbose:
                    print "NOTE: Removed", tempdir, "successfully."
            if ops[sect]["move"]:
                try:
                    src_collab.deletePage(page)
                except opencollab.wiki.WikiFailure, (strerror):
                    print "ERROR:", strerror
                    continue
                else:
                    if verbose:
                        print "NOTE: Page deleted successfully from", url

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

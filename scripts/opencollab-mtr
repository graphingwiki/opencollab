#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import re, socket, optparse, subprocess
from subprocess import Popen
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.meta import Metas, Meta, Func
from opencollab.util.config import parseOptions
from opencollab.util.wiki import importMetas

def mod_hop(hop):
    s = hop.replace('.', '') 
    pad = 3 - len(hop)
    for i in range(pad): 
        s = "0" + s
    return s

def shred_trace(host, trace):
    collab_metas = Metas()
    lines = trace.split('\n')
    s = []
    prev = "@PAGE@"
    source = None
    for line in lines[1:]:
        s = line.split()
        if s:
            hop = mod_hop(s[0])
            cur = s[1]
            if source is not None:
                cur = src
            collab_metas[cur]["MTR SRC"].add("[[%s]]" % source)
            collab_metas[cur]["MTR HOP"].add(hop)
            collab_metas[cur]["MTR DST"].add('[[%s]]' % host)
            collab_metas[cur]["MTR LOSS"].add(s[2])
            collab_metas[cur]["MTR SENT"].add(s[3])
            collab_metas[cur]["MTR AVG"].add(s[4])
            collab_metas[cur]["MTR BEST"].add(s[5])
            collab_metas[cur]["MTR WORST"].add(s[6])
            collab_metas[cur]["MTR STDDEV"].add(s[7])
            if prev != cur:
                collab_metas[cur]["PREV HOP"].add("[[%s]]" % prev)
            prev = cur
            collab_metas[cur]["TYPE"].add("IPv4")
    return collab_metas

def run_trace(host, mtr, count):
    mtr = mtr + " -rnc " + str(count) + " " + host
    mtrp = Popen(mtr, shell=True, stdin=subprocess.PIPE, 
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=1)
    mtrp.stdin.write(host + '\n')
    (sout, err) = mtrp.communicate()
    return sout, err

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option("-m", "--mtr-path",
        dest="mtrpath", default=None, metavar="MTR-PATH",
        help=("MTR-PATH. defaults to /usr/bin/mtr."))
    parser.add_option("-n", "--number-of-cycles",
        dest="count", default=None, metavar="COUNT",
        help=("COUNT of seconds to run the trace. Defaults to 10 seconds per host."))
    parser.set_usage("%prog [options] 0..N destination hosts")
    metas = Metas()
    hosts = []
    failed = []
    ops = {}
    sect = "mtr"
    ops = parseOptions(parser, sect, template=True)
    url = ops["creds"]["url"]
    verbose = ops[sect]["verbose"]
    template = ops[sect]["template"]
    if template is None:
        template = "IdentityTemplate"
    category = ops[sect]["category"]
    if category is None:
        category = "CategoryIdentity"
    replace = ops[sect]["lasteditwins"] 
    mtrpath= ops[sect]["mtrpath"]
    if mtrpath is None:
        mtrpath = "/usr/bin/mtr"
    count = ops[sect]["count"]
    if count is None:
        count = 10
    args = ops[sect]["args"]
    if len(args) < 1:
        parser.error("You need to specify a target host. Use -h for help.")
    hosts = args
    if verbose:
        print "Authenticating to: " + repr(url)
    while True:
        try:
            collab = CLIWiki(ssl_verify_cert=False, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    for host in hosts:
        if verbose:
           print "Running trace to:", host 
        trace,error = run_trace(host, mtrpath, count)
        if error:
           print error
        else:
	   metas.update(shred_trace(host, trace)) 
    if verbose:
        print "Importing identities to collab."
    failed = importMetas(collab, metas, template, verbose, replace)
    if failed:
        for page in failed:
            if verbose:
                print "ERROR uploading:",  page, repr(metas[page])
            else:
                print "ERROR uploading:", page

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

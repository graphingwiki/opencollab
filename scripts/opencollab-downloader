#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 by Joachim Viide, Pekka Pietikäinen, Mika Seppänen  
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os, sys, md5, optparse, socket
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.meta import Meta
from opencollab.util.config import parseOptions
from urllib import unquote

def fileExists(wiki, page, attachment, filename, chunkSize=1024*1024):
    if not os.path.exists(filename):
        return False

    digest, size = wiki.getAttachmentInfo(page, attachment)
    opened = open(filename, "rb")
    hashed = md5.new()
    total = 0

    while True:
        data = opened.read(chunkSize)
        if not data:
            break

        total += len(data)
        hashed.update(data)

    opened.close()
    
    if total != size:
        return False

    if hashed.hexdigest() != digest:
        return False

    return True

def downloadFile(collab, page, quotedFile, basePath, num, count):
    # Canonize the file path
    filePath = unquote(quotedFile)
    filePath = os.path.abspath(filePath)

    # Canonize the base path
    basePath = os.path.abspath(basePath)

    # Check that the file path starts with the base path
    directory, _ = os.path.split(filePath)
    directory = os.path.join(directory, "")
    basePath = os.path.join(basePath, "")
    if not directory.startswith(basePath):
        raise IOError("file path '%s' not under the base path" % filePath)

    shortName = filePath[len(basePath):]

    # Check whether the file actually already exists
    if fileExists(collab, page, quotedFile, filePath):
        status = num, count, shortName
        sys.stdout.write("%d/%d file %s already exists, skipping\n" % status)
        sys.stdout.flush()
        return

    if not os.path.exists(directory):
        os.makedirs(directory)
    file = open(filePath, "wb")
    sys.stdout.write("%d/%d downloading %s\n" % (num, count, shortName))
    sys.stdout.write("\rstarting download...")
    sys.stdout.flush()

    for data, current, total in collab.getAttachmentChunked(page, quotedFile):
        percent = 100.0 * current / float(max(total, 1))
        status = current, total, percent

        file.write(data)

        sys.stdout.write("\rreceived %d/%d bytes (%.02f%%)" % status)
        sys.stdout.flush()

    sys.stdout.write("\n")
    sys.stdout.flush()

    file.close()

def main():
    parser = optparse.OptionParser()
    parser.add_option("-o", "--output",
        dest="output", default=None, metavar="PATH",
        help="Save the downloaded files under PATH instead of CWD.")
    parser.add_option( "-p", "--download-from-page",
        action="store", type="string", dest="page",
        metavar = "PAGE", help = "PAGE to download attachments from.")
    ops = {}
    sect = "downloader"
    ops = parseOptions(parser, sect)
    url = ops["creds"]["url"]
    verbose = ops[sect]["verbose"]
    basePath = ops[sect]["output"]
    if basePath is None:
        basePath = os.getcwd()
    page = ops[sect]["page"]
    if page is None:
        parser.error("Page to download from needs to be specified. Use -h for help.")
    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if verbose:
        print "Enumerating attachments from collab: " + url + page
    attachments = collab.listAttachments(page)
    if verbose:
       print "Downloading attachments from:", page
    for num, attachment in enumerate(attachments):
        downloadFile(collab, page, attachment, basePath, num+1, len(attachments))

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

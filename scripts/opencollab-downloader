#!/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 by Joachim Viide, Pekka Pietikäinen, Mika Seppänen  
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import md5
import optparse

from opencollab.wiki import CLIWiki
from opencollab.meta import Meta
from urllib import unquote

def main():
    parser = optparse.OptionParser()
    parser.add_option("-o", "--output",
                      dest="output",
                      default=None,
                      metavar="OUTPUT",
                      help="save the file to name OUTPUT in the wiki")

    parser.set_usage("%prog [options] WIKIURL PAGENAME")
    options, args = parser.parse_args()
    if len(args) != 2:
        parser.error("wiki url and pagename have to be defined")

    url, page = args
    wiki = CLIWiki(url)

    if options.output is None:
        basePath = os.getcwd()
    else:
        basePath = options.output

    print "Connecting to wiki..."
    attachments = wiki.listAttachments(page)
    for num, attachment in enumerate(attachments):
        downloadFile(wiki, page, os.path.join(page,attachment), os.path.join(page,basePath), num+1, len(attachments))

def fileExists(wiki, page, attachment, filename, chunkSize=1024*1024):
    if not os.path.exists(filename):
        return False

    digest, size = wiki.getAttachmentInfo(page, attachment)
    opened = open(filename, "rb")
    hashed = md5.new()
    total = 0

    while True:
        data = opened.read(chunkSize)
        if not data:
            break

        total += len(data)
        hashed.update(data)

    opened.close()
    
    if total != size:
        return False

    if hashed.hexdigest() != digest:
        return False

    return True

def downloadFile(wiki, page, quotedFile, basePath, num, count):
    # Canonize the file path
    filePath = unquote(quotedFile)
    filePath = os.path.abspath(filePath)

    # Canonize the base path
    basePath = os.path.abspath(basePath)

    # Check that the file path starts with the base path
    directory, _ = os.path.split(filePath)
    directory = os.path.join(directory, "")
    basePath = os.path.join(basePath, "")
    print "dir:%s basePath:%s" %( directory, basePath)
    if not directory.startswith(basePath):
        raise IOError("file path '%s' not under the base path" % filePath)

    shortName = filePath[len(basePath):]

    # Check whether the file actually already exists
    if fileExists(wiki, page, quotedFile, filePath):
        status = num, count, shortName
        sys.stdout.write("%d/%d file %s already exists, skipping\n" % status)
        sys.stdout.flush()
        return

    if not os.path.exists(directory):
        os.makedirs(directory)
    file = open(filePath, "wb")
    sys.stdout.write("%d/%d downloading %s\n" % (num, count, shortName))
    sys.stdout.write("\rstarting download...")
    sys.stdout.flush()

    for data, current, total in wiki.getAttachmentChunked(page, quotedFile):
        percent = 100.0 * current / float(max(total, 1))
        status = current, total, percent

        file.write(data)

        sys.stdout.write("\rreceived %d/%d bytes (%.02f%%)" % status)
        sys.stdout.flush()

    sys.stdout.write("\n")
    sys.stdout.flush()

    file.close()

if __name__ == "__main__":
    main()

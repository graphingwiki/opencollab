#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    opencollab-csv-meta
     - Edits or lists metadata on pages

    @copyright: 2011 by Juhani Eronen <exec@iki.fi> and Joachim Viide
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import csv
import sys
import socket
from optparse import OptionParser
from opencollab.wiki import CLIWiki
from opencollab.wiki import WikiFailure
from opencollab.util.config import parseOptions


def to_rows(pages):
    counts = {}
    for page, metas in pages.iteritems():
        for key, values in metas.iteritems():
            counts[key] = max(counts.get(key, 0), len(values))
    keys = sorted(counts.keys())

    keyrow = ["Page name"]
    for key in keys:
        keyrow.extend([key] * counts[key])
    yield keyrow

    for page in sorted(pages):
        metas = pages[page]
        row = [encode(page)]
        for key in keys:
            values = sorted(metas.get(key, []))
            row.extend(map(encode, values))
            row.extend([""] * (counts[key] - len(values)))
        yield row


def encode(x):
    return x.encode("utf-8")


def decode(x):
    return x.decode("utf-8")


def escape(x):
    return x.encode("unicode-escape")

operations = list()


def callback(option, opt, value, parser, operation):
    operations.append((operation, value))

usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)

parser.add_option("-G", "--get", action="callback",
                  callback=callback, callback_args=("get",), type="string",
                  help=("Get metadata from Wiki with a  MetaTable argument " +
                        "string."))
parser.add_option("-A", "--add", action="callback",
                  callback=callback, callback_args=("add",), type="string",
                  help=("Add metadata based on a semicolon-delimited CSV file " +
                        "in a batch fashion. First row states the keys, " +
                        "first colums states the pages."))
parser.add_option("-S", "--set", action="callback",
                  callback=callback, callback_args=("set",), type="string",
                  help=("Replace metadata based on a semicolon-delimited CSV " +
                        "file in a batch fashion. First row states the keys, " +
                        "first colums states the pages."))

sect = "csv-meta"
ops = parseOptions(parser, sect, config=True, template=True)
x509 = ops[sect]["x509"]
x509_ca_file = ops[sect]["x509_ca_file"]
template = ops[sect]["template"]

while True:
    try:
        collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, 
                         **ops['creds'])
    except WikiFailure:
        print "ERROR: Authentication failed."
    except (UnicodeError, socket.gaierror):
        sys.exit("ERROR: Not a valid URL.")
    else:
        break

for operation, argument in operations:
    if operation == "get":
        results = collab.getMeta(argument)
        writer = csv.writer(sys.stdout, delimiter=";")
        writer.writerows(to_rows(results))
        sys.stdout.flush()
    else:
        replace = operation == "set"
        reader = csv.reader(open(argument, "rb"), delimiter=";")

        # Keys from first row, ignore the key for the first column
        keys = []
        for keys in reader:
            keys = keys[1:]
            break

        for row in reader:
            if not row:
                continue

            page = decode(row[0])

            metas = dict()
            for key, value in zip(keys, row[1:]):
                metas.setdefault(key, []).append(value)

            result = collab.setMeta(page, metas, replace, template)
            for line in result:
                print >> sys.stderr, escape(page) + ":", escape(line)

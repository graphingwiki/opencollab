#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os, sys, re, glob, optparse, socket
from opencollab.wiki import CLIWiki, WikiFailure, WikiFault
from opencollab.meta import Meta, Metas
from opencollab.util.config import parseOptions
from opencollab.util.file import uploadFile

CODETOOLS_KEYS = [
    'Text Document', 'D3 Install File', 'JAR File', 'TAR Archive',
    'ZIP Archive', 'PDF Document', 'INI File', 'Hotfix File',
    'HTML Document'     
]

def read_file(ifile):
    content=""
    try:
        f = open(ifile, 'r')
        content = f.read()
        f.close()
    except IOError:
        print "Couldn't read input file: ", sys.exc_info()[0]
    return content

def htaccess(htaccess,arena_user):
    content = read_file(htaccess)
    if re.search(arena_user, content):
        return True
    else:
        return False

def enum_dirs(arena_dir_glob,arena_user):
    flist=[]
    arena_dirs=[]
    flist = glob.glob(arena_dir_glob)
    for f in flist:
        dir,file = (os.path.split(f))
        if htaccess(f, arena_user) == True:
            arena_dirs.append(dir)
    return arena_dirs

def formatReleaseNotes(page, rnotes, private):
    content = read_file(rnotes)
    lines = content.split("\n")
    suitename = lines[0]
    if private:
        page = "#acl SupportGroup:admin,revert,read,write,delete,invite " + page + "/LicenseGroup:read All:none"
    else:
        page = "#acl SupportGroup:admin,revert,read,write,delete,invite All:read"
    page += "\n\n<<Navigation(children)>>\n\n"
    page += "{{{#!wiki center\n= " + suitename + " =\n}}}\n\n"
    page += "<<TableOfContents>>\n\n"
    page += "\n".join(lines[1:])
    page += "= Metadata =\n"
    page += "\n----\n<<LinkedIn>>\n----\n"
    return page, suitename

def formatDownloadPage(page, dpage):
    pcontent = "#acl SupportGroup:admin,revert,read,write,delete,invite " + page + "/LicenseGroup:read All:none"
    pcontent += "\n= @PAGE@ =\n"
    pcontent += "\n<<AttachTree>>\n"
    pcontent += "\n----\n<<LinkedIn>>\n----\n"
    return pcontent

def upload_files(collab, arena_dirs, marker, progress, notools, blacklist, private, verbose):
    flist =[]
    jar = re.compile('\.jar')
    tar_gz = re.compile('tar\.gz')
    zip = re.compile('\.zip')
    pdf = re.compile('\.pdf')
    install = re.compile('\.install')
    ini = re.compile('\.ini')
    bnf = re.compile('\.bnf')
    html = re.compile('\.html?')
    txt = re.compile('\.txt')
    d3 = re.compile('d3-')
    blre = re.compile('%s' % blacklist)
    metas = Metas()
    for dir in arena_dirs:
        if blre.search(dir):
            if verbose:
                print "NOTE: Blacklisting", dir
            continue
        elif verbose:
            print "NOTE: Handling", dir
        flist = os.listdir(dir)
        changes = False
        tmp = dir.rsplit('/', 1) 
        page = tmp.pop()
        suitename = ""
        metas[page]["gwikicategory"].add("CategoryCodenomiconArena")
        metas[page]["gwikitemplate"].add("CodenomiconArenaTemplate")
        if 'release.txt' in flist:
            fname = dir + "/release.txt"
            pcontent, suitename = formatReleaseNotes(page, fname, private)
            try:
                collab.putPage(page,pcontent)
            except WikiFault:
                pass
            metas[page]["suite name"].add(suitename)
        else:
            txt_files = filter(txt.search, flist)
            for txt_file in txt_files:
                fname = dir + "/" + txt_file
                metas[page]["Text Document"].add('[[attachment:%s]]' % txt_file)
                changes |= uploadFile(collab,page,fname,txt_file,progress)
        install_files = filter(install.search, flist) 
        dpage = page + "/Download"
        pcontent = formatDownloadPage(page, dpage)
        metas[dpage]["gwikicategory"].add("CategoryDownload")
        try:
            collab.putPage(dpage,pcontent)
        except WikiFault:
            pass
        for install_file in install_files:
            fname = dir + "/" + install_file
            if d3.search(install_file):
                metas[page]["TYPE"].add('D3 Suite')
            else:
                metas[page]["TYPE"].add('D2 Suite')
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["D3 Install File"].add('[[attachment:%s/%s |Download]]' % (dpage, install_file))
                changes |= uploadFile(collab,dpage,fname,install_file,progress)
        if not install_files:
            jar_files = filter(jar.search, flist) 
            for jar_file in jar_files:
                fname = dir + "/" + jar_file
                if notools:
                    if verbose:
                        print "NOTE: Not uploading", fname
                else:
                    metas[page]["JAR File"].add('[[attachment:%s/%s|Download]]' % (dpage, jar_file))
                    changes |= uploadFile(collab,dpage,fname,jar_file,progress)
                if d3.search(jar_file):
                    metas[page]["TYPE"].add('D3 Monitor')
                else:
                    metas[page]["TYPE"].add('D2 Suite')
        tar_gz_files = filter(tar_gz.search, flist) 
        for tar_gz_file in tar_gz_files:
            fname = dir + "/" + tar_gz_file
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["TAR Archive"].add('[[attachment:%s/%s]]' % (dpage, tar_gz_file))
                changes |= uploadFile(collab,dpage,fname,tar_gz_file,progress)
        zip_files = filter(zip.search, flist) 
        for zip_file in zip_files:
            fname = dir + "/" + zip_file
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["ZIP Archive"].add('[[attachment:%s/%s]]' % (dpage, zip_file))
                changes |= uploadFile(collab,dpage,fname,zip_file,progress)
        pdf_files = filter(pdf.search, flist) 
        for pdf_file in pdf_files:
            fname = dir + "/" + pdf_file
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["PDF Document"].add('[[attachment:%s/%s]]' % (dpage, pdf_file))
                changes |= uploadFile(collab,dpage,fname,pdf_file,progress)
        ini_files = filter(ini.search, flist) 
        for ini_file in ini_files:
            fname = dir + "/" + ini_file
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["INI File"].add('[[attachment:%s/%s]]' % (dpage, ini_file))
                changes |= uploadFile(collab,dpage,fname,ini_file,progress)
        bnf_files = filter(bnf.search, flist) 
        for bnf_file in bnf_files:
            fname = dir + "/" + bnf_fileDownload
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["Hotfix File"].add('[[attachment:%s/%s]]' % (dpage, bnf_file))
                changes |= uploadFile(collab,dpage,fname,bnf_file,progress)
        html_files = filter(html.search, flist) 
        for html_file in html_files:
            fname = dir + "/" + html_file
            if notools:
                if verbose:
                    print "NOTE: Not uploading", fname
            else:
                metas[page]["HTML Document"].add('[[attachment:%s/%s]]' % (dpage, html_file))
                changes |= uploadFile(collab,dpage,fname,html_file,progress)

        if changes == True:
            print "NOTE: " + page + " attachments were updated"
            if marker:
                metas[page]["changed"].add("True")
    return metas

def main():
    parser = optparse.OptionParser()
    parser.add_option("-a", "--arena-dir-glob",
                      dest="arenadirglob",
                      default=None,
                      metavar="ARENA-DIR-GLOB",
                      help=("ARENA-DIR-GLOB, i.e. \"/path/to/arena/*/*/.htaccess\""))
    parser.add_option("-e", "--arena-user",
                      dest="arenauser",
                      default=None,
                      metavar="ARENA-USER",
                      help=("ARENA-USER username."))
    parser.add_option( "-m", "--marker",
                       action="store",
                       default=None,
                       type="string", dest="marker",
                       help="Marker meta key to remove if tool has changed.")
    parser.add_option( "-b", "--blacklist", action="store", 
            type="string", dest="blacklist", default=None,
            help="Blacklist string to suppress uploading certain tools, which match the expression.")
    parser.add_option( "-p", "--private", action="store_true", 
            dest="private", default=False, help="Set a private group acl, instead of the default.")
    parser.add_option("-P", "--progress", action="store_true",
        dest="progress", default=False, help="Display file upload progress information." )
    parser.add_option("-N", "--no-tools", action="store_true",
        dest="notools", help="Do not upload tool files, only release notes." )
    parser.set_usage("%prog [options]")
    arena_dirs=[]
    metas = Metas()
    sect = "arena"
    ops = parseOptions(parser, sect)
    progress = ops[sect]["progress"]
    url = ops["creds"]["url"]
    notools = ops[sect]["notools"]
    verbose = ops[sect]["verbose"]
    blacklist = ops[sect]["blacklist"]
    arena_dir_glob = ops[sect]["arenadirglob"]
    private = ops[sect]["private"]
    if arena_dir_glob == None:
        parser.error("ERROR: Arena dir glob must be specified. Use -h for help.")
    arena_user = ops[sect]["arenauser"]
    if arena_user == None:
        parser.error("ERROR: Arena user must be specified i.e. f.l@example.invalid. Use -h for help.")
    if verbose:
        print "Authenticating to: " + repr(url)
    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Collab connection failed.")
        else:
            break
    marker = ops[sect]["marker"]
    arena_dirs = enum_dirs(arena_dir_glob, arena_user)
    if arena_dirs:
        if marker is not None and verbose:
            print "NOTE: Removing meta key <" + marker + \
                "> for pages with changes in attachments"
        if verbose:
            print "NOTE: Enumerating Arena dirs from: " + str(arena_dir_glob) + " for user " + arena_user
        metas = upload_files(collab, arena_dirs, marker, progress, notools, blacklist, private, verbose)
    else:
        print "ERROR: No source directories from arena dir glob enumeration. Nothing to upload."

    if verbose:
        print "NOTE: Updating metas to", url
    cleared = Meta()
    discarded = Metas()
    for page, meta in metas.iteritems():
        for k in CODETOOLS_KEYS:
            cleared[page].add(k)
        if metas[page]["changed"]:
            cleared[page].add(marker)
            del(metas[page]["changed"])
        #discarded[page]["key"].add("value")
    collab.incSetMeta(cleared, discarded, metas)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


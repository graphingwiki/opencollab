#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os, sys, re, glob, optparse, socket
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.meta import Meta
from opencollab.util.config import parseOptions
from opencollab.util.file import uploadFile

def read_file(htaccess):
    content=""
    try:
        f = open(htaccess, 'r')
        content = f.read()
        f.close()
    except IOError:
        print "Couldn't read input file: ", sys.exc_info()[0]
    return content

def htaccess(htaccess,arena_user):
    content = read_file(htaccess)
    if re.search(arena_user, content):
        return True
    else:
        return False

def enum_dirs(arena_dir_glob,arena_user):
    flist=[]
    arena_dirs=[]
    flist = glob.glob(arena_dir_glob)
    for f in flist:
        dir,file = (os.path.split(f))
        if htaccess(f, arena_user) == True:
            arena_dirs.append(dir)
    return arena_dirs

def upload_files(collab, arena_dirs, marker, template, progress, notools, blacklist, verbose):
    flist =[]
    jar = re.compile('\.jar')
    iso = re.compile('iso\.bz2')
    tar_gz = re.compile('tar\.gz')
    zip = re.compile('\.zip')
    pdf = re.compile('\.pdf')
    install = re.compile('\.install')
    ini = re.compile('\.ini')
    bnf = re.compile('\.bnf')
    html = re.compile('\.html?')
    txt = re.compile('\.txt')
    blre = re.compile('%s' % blacklist)
    page_metas = Meta()
    for dir in arena_dirs:
        if blre.search(dir):
            if verbose:
                print "NOTE: Blacklisting", dir
            continue
        elif verbose:
            print "NOTE: Handling", dir
        flist = os.listdir(dir)
        tmp = dir.rsplit('/', 2) 
        page_name = "/".join(tmp[1:3])
        changes = False
        page_metas["category"].add("CategoryCodenomiconArena")
        if 'release.txt' in flist:
            fname = dir + "/release.txt"
            page_metas["Release Notes"].add('{{attachment:release.txt}}')
            changes |= uploadFile(collab,page_name,fname,"release.txt",progress)
        else:
            txt_files = filter(txt.search, flist)
            for txt_file in txt_files:
                fname = dir + "/" + txt_file
                page_metas["Text Document"].add('[[attachment:%s]]' % txt_file)
                changes |= uploadFile(collab,page_name,fname,txt_file,progress)
        if notools is None:
            jar_files = filter(jar.search, flist) 
            for jar_file in jar_files:
                fname = dir + "/" + jar_file
                page_metas["JAR File"].add('[[attachment:%s]]' % jar_file)
                changes |= uploadFile(collab,page_name,fname,jar_file,progress)
            iso_files = filter(iso.search, flist) 
            for iso_file in iso_files:
                fname = dir + "/" + iso_file
                page_metas["ISO File"].add('[[attachment:%s]]' % iso_file)
                changes |= uploadFile(collab,page_name,fname,iso_file,progress)
            tar_gz_files = filter(tar_gz.search, flist) 
            for tar_gz_file in tar_gz_files:
                fname = dir + "/" + tar_gz_file
                page_metas["TAR Archive"].add('[[attachment:%s]]' % tar_gz_file)
                changes |= uploadFile(collab,page_name,fname,tar_gz_file,progress)
            zip_files = filter(zip.search, flist) 
            for zip_file in zip_files:
                fname = dir + "/" + zip_file
                page_metas["ZIP Archive"].add('[[attachment:%s]]' % zip_file)
                changes |= uploadFile(collab,page_name,fname,zip_file,progress)
            pdf_files = filter(pdf.search, flist) 
            for pdf_file in pdf_files:
                fname = dir + "/" + pdf_file
                page_metas["PDF Document"].add('[[attachment:%s]]' % pdf_file)
                changes |= uploadFile(collab,page_name,fname,pdf_file,progress)
            install_files = filter(install.search, flist) 
            for install_file in install_files:
                fname = dir + "/" + install_file
                page_metas["D3 Install File"].add('[[attachment:%s]]' % install_file)
                changes |= uploadFile(collab,page_name,fname,install_file,progress)
            ini_files = filter(ini.search, flist) 
            for ini_file in ini_files:
                fname = dir + "/" + ini_file
                page_metas["INI File"].add('[[attachment:%s]]' % ini_file)
                changes |= uploadFile(collab,page_name,fname,ini_file,progress)
            bnf_files = filter(bnf.search, flist) 
            for bnf_file in bnf_files:
                fname = dir + "/" + bnf_file
                page_metas["Hotfix File"].add('[[attachment:%s]]' % bnf_file)
                changes |= uploadFile(collab,page_name,fname,bnf_file,progress)
            html_files = filter(html.search, flist) 
            for html_file in html_files:
                fname = dir + "/" + html_file
                page_metas["HTML Document"].add('[[attachment:%s]]' % html_file)
                changes |= uploadFile(collab,page_name,fname,html_file,progress)

        if changes == True:
            print "NOTE: " + page_name + " attachments were updated"
            if marker:
                page_metas[marker].add('')
            
        collab.setMeta(page_name, page_metas, template=template, replace=True)
        page_metas = Meta()

def main():
    parser = optparse.OptionParser()
    parser.add_option("-a", "--arena-dir-glob",
                      dest="arenadirglob",
                      default=None,
                      metavar="ARENA-DIR-GLOB",
                      help=("ARENA-DIR-GLOB, i.e. \"/path/to/arena/*/*/.htaccess\""))
    parser.add_option("-e", "--arena-user",
                      dest="arenauser",
                      default=None,
                      metavar="ARENA-USER",
                      help=("ARENA-USER username."))
    parser.add_option( "-m", "--marker",
                       action="store",
                       default=None,
                       type="string", dest="marker",
                       help="Marker meta key to remove if tool has changed.")
    parser.add_option( "-b", "--blacklist", action="store", 
            type="string", dest="blacklist", default=None,
            help="Blacklist string to suppress uploading certain tools, which match the expression.")
    parser.add_option("-P", "--progress", action="store_true",
        dest="progress", default=False, help="Display file upload progress information." )
    parser.add_option("-N", "--no-tools", action="store_true",
        dest="notools", help="Do not upload tool files, only release notes." )
    parser.set_usage("%prog [options]")
    arena_dirs=[]
    sect = "arena"
    ops = parseOptions(parser, sect, template=True)
    progress = ops[sect]["progress"]
    url = ops["creds"]["url"]
    notools = ops[sect]["notools"]
    verbose = ops[sect]["verbose"]
    blacklist = ops[sect]["blacklist"]
    if ops[sect]["template"] is None:
        template = "CodenomiconArenaTemplate"
    else:
        template = ops[sect]["template"]
    if verbose:
        print "Authenticating to: " + repr(url)
    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    arena_dir_glob = ops[sect]["arenadirglob"]
    if arena_dir_glob == None:
        parser.error("Arena dir glob must be specified. Use -h for help.")
    arena_user = ops[sect]["arenauser"]
    if arena_user == None:
        parser.error("Arena user must be specified i.e. f.l@example.invalid. Use -h for help.")
    marker = ops[sect]["marker"]
    arena_dirs = enum_dirs(arena_dir_glob, arena_user)
    if arena_dirs:
        if marker is not None:
            print "Removing meta key <" + marker + \
                "> for pages with changes in attachments"
        if verbose:
            print "NOTE: Enumerating Arena dirs from: " + str(arena_dir_glob) + " for user " + arena_user

        upload_files(collab, arena_dirs, marker, template, progress, notools, blacklist, verbose)
    else:
        print "No source directories from arena dir glob enumeration. Nothing to upload."

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


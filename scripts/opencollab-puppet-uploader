#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2010-2012 Juhani Eronen, Ossi Salmi

    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import yaml
import socket
import optparse
import calendar
from datetime import datetime, date
from email.Utils import mktime_tz, parsedate_tz
from opencollab.meta import Meta, Metas
from opencollab.util.config import parseOptions
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.file import md5obj, uploadFile

# known facts which should be cleared when not present
FACTER_KEYS = [
    'libvirt_activedomains',
    'libvirt_inactivedomains',
]

def main():
    parser = optparse.OptionParser()
    parser.set_usage("%prog [options] <puppet-yaml-files]")
    parser.add_option("-a", "--attachments",
        action="store_true", dest="attachments", default=False,
        help="Upload YAML attachments.")
    parser.add_option("-s", "--short",
        action="store_true", dest="shortname", default=False,
        help="Strip domain from page names.")
    parser.add_option("-P", "--progress", action="store_true",
        dest="progress", default=False,
        help="Display file upload progress information.")
    ops = {}
    sect = "puppet"
    ops = parseOptions(parser, sect, template=True, category=True)
    progress = ops[sect]["progress"]
    url = ops["creds"]["url"]
    x509 = ops[sect]["x509"]
    x509_ca_file = ops[sect]["x509_ca_file"]
    verbose = ops[sect]["verbose"]
    template = ops[sect]["template"]
    if template is None:
        template = "IdentityTemplate"
    category = ops[sect]["category"]
    if category is None:
        category = "CategoryIdentity"
    shortname = ops[sect]["shortname"]
    attachments = ops[sect]["attachments"]
    args = ops[sect]["args"]

    while True:
        try:
            collab = CLIWiki(ssl_verify_cert=x509, ssl_ca_certs=x509_ca_file, **ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    clear = Meta()
    metas = Metas()

    for i, inputfile in enumerate(args):
        data = ""

        if verbose:
            print "NOTE: Parsing", inputfile

        # Not valid yaml for some reason, need to strip some ruby stuff
        for line in open(inputfile):
            if line.startswith("-"):
                continue
            data += line.replace("!ruby/sym ", "")

        values = yaml.safe_load(data)['values']
        page = values['homename']

        if shortname:
            page = page.split('.')[0]

        for key in values:
            if ('address' in key or key.startswith('network') or
                key.startswith('netmask') or
                key == 'homename' or key == 'hostname' or key == 'fqdn'):
                metas[page][key].add('[[%s]]' % (values[key].strip()))
            elif key in ['interfaces', 'libvirt_activedomains',
                         'libvirt_inactivedomains']:
                metas[page][key].update(values[key].split(','))
            elif key in ['_timestamp', 'lastupdated']:
                val = values[key]
                key = 'timestamp'
                if isinstance(val, (datetime, date)):
                    val = calendar.timegm(val.timetuple())
                else:
                    try:
                        val = mktime_tz(parsedate_tz(val))
                    except:
                        print >>sys.stderr, "Failed to parse timestamp" + \
                            "(%s in file %s)" % (repr(val), inputfile)
                        continue
                    val = mktime_tz(parsedate_tz(val))
                metas[page][key].add('<<DateTime(%s)>>' % (val))
            elif key in ['memoryfree', 'memorysize', 'memorytotal',
                         'swapfree', 'swapsize', 'libvirt_memorysize']:
                nro, mgn = values[key].split()
                nro = float(nro)
                if mgn == 'GB':
                    nro = 1024 * nro
                if mgn == 'TB':
                    nro = 1024 * 1024 * nro
                nro = str(int(round(nro)))
                if key == 'memorytotal':
                    key = 'memorysize'
                metas[page][key].add(nro)
            else:
                metas[page][key].add(values[key].strip())

        clear[page].update(metas[page])
        clear[page].update(FACTER_KEYS)

        if category is not None:
            for page in metas:
                if not 'gwikicategory' in metas[page]:
                    metas[page]["gwikicategory"].add(category)
                    clear[page].add("category")
        if template is not None:
            for page in metas:
                if not 'gwikitemplate' in metas[page]:
                    metas[page]["gwikitemplate"].add(template)
                    clear[page].add("template")

        if attachments:
            xml_page = md5obj(data).hexdigest()
            timestamp = os.stat(inputfile).st_ctime
            metas[xml_page]['TYPE'].add('puppet configuration')
            metas[xml_page]['Scan time'].add('<<DateTime(%s)>>' % (timestamp))
            metas[xml_page]['gwikicategory'] = ['CategoryScan']
            metas[xml_page]['gwikitemplate'] = ['ScanTemplate']
            clear[xml_page].update(metas[xml_page])
            uploadFile(collab, xml_page, '', inputfile, progress, data=data)

    if verbose:
        print "NOTE: Importing metas to", url
    collab.incSetMeta(clear, Metas(), metas)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

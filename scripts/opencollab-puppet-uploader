#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2010 Juhani Eronen

    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import yaml
import optparse
import os

from email.Utils import mktime_tz, parsedate_tz

from opencollab.meta import Metas
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.config import parseOptions
from opencollab.util.file import md5obj, uploadFile
from opencollab.util.wiki import importMetas

def main():
    parser = optparse.OptionParser()
    parser.set_usage("%prog [options] <puppet-yaml-files]")
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option( "-s", "--short",
        action="store_true", dest="shortname", default=False,
        help="Strip domain from page names.")
    parser.add_option("-P", "--progress", action="store_true",
                      dest="progress", default=False, 
                      help="Display file upload progress information." )
    ops = {}
    sect = "puppet"
    iwlist_files=[]
    failed = []
    ops = parseOptions(parser, sect, template=True, category=True)
    progress = ops[sect]["progress"]
    url = ops["creds"]["url"]
    verbose = ops[sect]["verbose"]
    template = ops[sect]["template"]
    if template is None:
        template = "IdentityTemplate"
    category = ops[sect]["category"]
    if category is None:
        category = "CategoryIdentity"
    replace = ops[sect]["lasteditwins"] 
    shortname = ops[sect]["shortname"]
    args = ops[sect]["args"]

    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    for i, inputfile in enumerate(args):
        timestamp = os.stat(inputfile).st_ctime
        data = ""

        # Not valid yaml for some reason, need to strip some ruby stuff
        for line in open(inputfile):
            if line.startswith("-"): continue
            data += line.replace("!ruby/sym ", "")

        xml_page = md5obj(data).hexdigest()

        if verbose:
            print "NOTE: Parsing", inputfile

        values = yaml.safe_load(data)['values']
        page = values['homename']

        if shortname:
            page = page.split('.')[0]

        metas = Metas()
        for key in values:
            if ('address' in key or key.startswith('network') or
                key.startswith('netmask') or
                key == 'homename' or key == 'hostname' or key == 'fqdn'):
                metas[page][key].add('[[%s]]' % (values[key].strip()))
            elif key == 'interfaces':
                for iface in values[key].split(','):
                    metas[page][key].add(iface.strip())
            elif key == '_timestamp':
                val = values[key]
                key = 'timestamp'
                val = mktime_tz(parsedate_tz(val))
                metas[page][key].add('<<DateTime(%s)>>' % (val))
            elif key in ['memoryfree', 'memorysize', 'swapfree', 'swapsize']:
                nro, mgn = values[key].split()
                nro = float(nro)
                if mgn == 'GB':
                    nro = 1024 * nro
                if mgn == 'TB':
                    nro = 1024 * 1024 * nro
                nro = str(int(round(nro)))
                metas[page][key].add(nro)
            else:
                metas[page][key].add(values[key].strip())

        metas[xml_page]['TYPE'].add('puppet configuration')
        metas[xml_page]['Scan time'].add('<<DateTime(%s)>>' % (timestamp))
        metas[xml_page]['gwikicategory'] = ['CategoryScan']
        metas[xml_page]['gwikitemplate'] = ['ScanTemplate']

        if category is not None:
            for page in metas:
                if not 'gwikicategory' in metas[page]:
                    metas[page]["gwikicategory"].add(category)
        if template is not None:
            for page in metas:
                if not 'gwikitemplate' in metas[page]:
                    metas[page]["gwikitemplate"].add(template)

        if verbose:
            print "NOTE: Importing metas to", url
        failed = importMetas(collab, metas, template, verbose)
        if failed:
            for page in failed:
                if verbose:
                    print "ERROR uploading:", page, repr(metas[page])
                else:
                    print "ERROR uploading:", page

        uploadFile(collab, xml_page, '', inputfile, progress, data=data)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import re
import smtplib
import optparse
from opencollab.util.config import parse_config
from opencollab.meta import Meta, Metas
from opencollab.wiki import CLIWiki, WikiFailure

try: 
    from email.mime.text import MIMEText
except:
    from email.MIMEText import MIMEText
try:
    from email.mime.multipart import MIMEMultipart
except:
    from email.MIMEMultipart import MIMEMultipart


def get_page_html(collab, page):
    content = ""
    try:
        content = collab.getPageHTML(page)
    except WikiFailure, msg:
        print "WikiFailure: ", page, " ",  msg
    else:
        return content

def send_content(url,collab,page_content,sender,recipient,subject,header,footer,page_marker):
    msg = MIMEMultipart()
    part = ''
    if subject == None:
        msg['Subject'] = "Changes at: " + url
    else:
        msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = recipient
    msg.add_header('Content-Disposition', 'inline')
    html_head = "<html>\n<head>\n<title></title>\n</head>\n<body>"
    html_foot = "\n</body>\n</html>"
    content = html_head

    if header is not None:
        content += header
    for page in page_content:
        content += page_content[page]
        collab.setMeta(page, page_marker, replace=True)
    if footer is not None:
        content += footer

    content += html_foot
    part=MIMEText(content, "HTML", "UTF-8")
    part.add_header('Content-Disposition', 'inline')
    msg.attach(part)
    s = smtplib.SMTP()
    s.connect()
    s.sendmail(sender, recipient, msg.as_string())
    s.close()

def main():
    parser = optparse.OptionParser()
    parser.add_option("-a", "--arguments",
                      dest="selection",
                      default=None,
                      metavar="ARGUMENTS",
                      help=("Metatable search ARGUMENTS."))
    parser.add_option("-c", "--config",
                      dest="config",
                      default=None,
                      metavar="CONFIG",
                      help=("Read configurable variables from CONFIG."))
    parser.add_option("-f", "--from",
                      dest="sender",
                      default= None,
                      metavar="SENDER",
                      help=("Email SENDER address."))
    parser.add_option("-F", "--FOOTER",
                      dest="footer",
                      default=None,
                      metavar="FOOTER",
                      help=("Read last attachment from page name FOOTER."))
    parser.add_option("-H", "--HEADER",
                      dest="header",
                      default=None,
                      metavar="HEADER",
                      help=("Read email attachemnt #1 from page name HEADER."))
    parser.add_option("-m", "--marker",
                      dest="marker",
                      default=None,
                      metavar="MARKER",
                      help=("Notify MARKER key=value pair."))
    parser.add_option("-r", "--recipient",
                      dest="recipient",
                      default=None,
                      metavar="RECIPIENT",
                      help=("Email notify RECIPIENT."))
    parser.add_option("-s", "--subject",
                      dest="subject",
                      default=None,
                      metavar="SUBJECT",
                      help=("Notify email SUBJECT."))
    parser.add_option("-u", "--url",
                      dest="url",
                      default=None,
                      metavar="COLLAB-URL",
                      help=("COLLAB-URL to connect to."))
    parser.add_option("-v", "--verbose",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )

    options, args = parser.parse_args()

    iopts = {}
    page_content = {}
    if args:
        url = args[0]
    if options.config:
        iopts = parse_config(options.config, "creds", "notifier")
    if options.sender:
        sender = options.sender
    elif options.config and "sender" in iopts["notifier"]:
        sender = iopts["notifier"]["sender"]
    else:
        sender = "opencollab-notifier@do.not.respond.to.me.INVALID"
    pages = Metas() 
    page_marker = Meta()
    if options.selection:
        selection = options.selection
    elif options.config and "selection" in iopts["notifier"]:
        selection = iopts["notifier"]["selection"]
    else:
        selection = None
    if options.marker:
        marker=options.marker
    elif options.config and "marker" in iopts["notifier"]:
        marker=iopts["notifier"]["marker"]
    else:
        marker="Notified=Yes"
    k,v = marker.split('=')
    page_marker[k].add(v)
    if options.recipient:
        recipient = options.recipient
    elif options.config and "recipient" in iopts["notifier"]:
        recipient = iopts["notifier"]["recipient"]
    if options.subject:
        subject = options.subject
    elif options.config and "subject" in iopts["notifier"]:
        subject = iopts["notifier"]["subject"]
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    else:
        parser.error("Collab URL needs to be specified. Use -h for help.")
    if options.verbose:
        print "NOTE: URL is " + url
        print "NOTE: Marker to set is " + marker
        print "NOTE: sender is " + sender
        print "NOTE: Recipient is " + recipient
        print "NOTE: Subject is '" + subject + "'"
    if selection is not None:
        pages = collab.getMeta(selection)
    else:
        parser.error("Meta argument selection needs to be specified.")
    for page in pages:
        if pages[page][k] == page_marker[k]:
            pass
        else:
            if options.verbose:
                print "Rendering " + page + " to HTML"
            page_html = get_page_html(collab, page)
            page_content[page] = page_html
    if page_content:
        if options.header:
            page_html = get_page_html(collab,options.header)
            header = page_html
        elif options.config and "header" in iopts["notifier"]:
            page_html = get_page_html(collab,iopts["notifier"]["header"])
            header = page_html
        else:
            header = None
        if options.footer:
            page_html = get_page_html(collab,options.footer)
            footer = page_html
        elif options.config and "footer" in iopts["notifier"]:
            page_html = get_page_html(collab,iopts["notifier"]["footer"])
            footer = page_html
        else:
            footer = None
        if options.verbose:
            print "Notifying " + recipient + " via email."
        send_content(url,collab,page_content,sender,recipient,subject,header,footer,page_marker)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


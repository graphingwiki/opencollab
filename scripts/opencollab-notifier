#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import os
import sys
import re
import smtplib
import optparse
import ConfigParser
from opencollab.meta import Meta, Metas
from opencollab.wiki import CLIWiki, WikiFailure

try: 
    from email.mime.text import MIMEText
except:
    from email.MIMEText import MIMEText
try:
    from email.mime.multipart import MIMEMultipart
except:
    from email.MIMEMultipart import MIMEMultipart


def get_page_html(collab, page):
    content = ""
    try:
        content = collab.getPageHTML(page)
    except WikiFailure, msg:
        print "WikiFailure: ", page, " ",  msg
    else:
        return content

def send_content(url,collab,page_content,sender,recipient,subject,header,footer,page_marker):
    msg = MIMEMultipart()
    part = ''
    if(subject == None):
        msg['Subject'] = "Changes at: " + url
    else:
        msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = recipient
    msg.add_header('Content-Disposition', 'inline')
    html_head = "<html>\n<head>\n<title></title>\n</head>\n<body>"
    html_foot = "\n</body>\n</html>"
    if(header is not None):
        content = html_head
        content += header
        content += html_foot
        part=MIMEText(content, "HTML", "UTF-8")
        part.add_header('Content-Disposition', 'inline')
        msg.attach(part)
    for page in page_content:
        content = html_head
        content += page_content[page]
        content += html_foot
        part=MIMEText(content, "HTML", "UTF-8")
        part.add_header('Content-Disposition', 'inline')
        msg.attach(part)
        collab.setMeta(page,page_marker,replace=True)
    if(footer is not None):
        content = html_head
        content += footer
        content += html_foot
        part=MIMEText(content, "HTML", "UTF-8")
        part.add_header('Content-Disposition', 'inline')
        msg.attach(part)
    s = smtplib.SMTP()
    s.connect()
    s.sendmail(sender, recipient, msg.as_string())
    s.close()

def parse_config(cpath, args):
    configparser = ConfigParser.ConfigParser()
    configparser.readfp( open(cpath) )
    creds = dict(configparser.items("creds"))
    iopts = dict(configparser.items("notifier"))
    if(creds.has_key("url")):
        iopts["url"] = creds["url"]
    if(creds.has_key("username")):
        iopts["username"] = creds["username"]
    if(creds.has_key("password")):
        iopts["password"] = creds["password"]
    return iopts

def main():
    parser = optparse.OptionParser()
    parser.add_option("-a", "--arguments",
                      dest="selection",
                      default=None,
                      metavar="ARGUMENTS",
                      help=("Metatable search ARGUMENTS."))
    parser.add_option("-c", "--config",
                      dest="config",
                      default=None,
                      metavar="CONFIG",
                      help=("Read configurable variables from CONFIG."))
    parser.add_option("-f", "--from",
                      dest="sender",
                      default= "opencollab-notifier@do.not.respond.to.me.INVALID",
                      metavar="SENDER",
                      help=("Email SENDER address."))
    parser.add_option("-F", "--FOOTER",
                      dest="footer",
                      default=None,
                      metavar="FOOTER",
                      help=("Read last attachment from page name FOOTER."))
    parser.add_option("-H", "--HEADER",
                      dest="header",
                      default=None,
                      metavar="HEADER",
                      help=("Read email attachemnt #1 from page name HEADER."))
    parser.add_option("-m", "--marker",
                      dest="marker",
                      default="Notified=Yes",
                      metavar="MARKER",
                      help=("Notify MARKER key=value pair."))
    parser.add_option("-r", "--recipient",
                      dest="recipient",
                      default=None,
                      metavar="RECIPIENT",
                      help=("Email notify RECIPIENT."))
    parser.add_option("-s", "--subject",
                      dest="subject",
                      default=None,
                      metavar="SUBJECT",
                      help=("Notify email SUBJECT."))
    parser.add_option("-v", "--verbose",
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." )

    options, args = parser.parse_args()

    iopts = {}
    url = None
    page_content = {}
    header=None
    footer=None
    if(args):
        url = args[0]
    if(options.config):
        iopts = parse_config(options.config,args)
        collab = CLIWiki(url, config=options.config)
        url = iopts["url"]
    elif(len(args) != 1):
        parser.error("Collab url has to be specified.")
    else:
        collab = CLIWiki(url)
    if(options.sender):
        sender = options.sender
    elif(iopts.has_key("sender")):
        sender = iopts["sender"]
    pages = Metas() 
    page_marker = Meta()
    if(options.selection):
        selection = options.selection
    elif(iopts.has_key("selection")):
        selection = iopts["selection"]
    if(options.marker):
        marker=options.marker
    elif(iopts.has_key("marker")):
        marker=iopts["marker"]
    k,v = marker.split('=')
    page_marker[k] = v
    if(options.verbose):
        print "Getting " + marker + " from " + url
    pages = collab.getMeta(selection)
    for page in pages:
        if(pages[page][k] == page_marker[k]):
            pass
        else:
            if(options.verbose):
                print "Rendering " + page + " to HTML"
            page_html = get_page_html(collab, page)
            page_content[page] = page_html
    if(options.recipient):
        recipient = options.recipient
    elif(iopts.has_key("recipient")):
        recipient = iopts["recipient"]
    if(options.subject):
        subject = options.subject
    elif(iopts.has_key("subject")):
        subject = iopts["subject"]
    if(page_content):
        if(options.header):
            page_html = get_page_html(collab,options.header)
            header = page_html
        elif(iopts.has_key("header")):
            page_html = get_page_html(collab,iopts["header"])
            header = page_html
        if(options.footer):
            page_html = get_page_html(collab,options.footer)
            footer = page_html
        elif(iopts.has_key("footer")):
            page_html = get_page_html(collab,iopts["footer"])
            footer = page_html
        if(options.verbose):
            print "Notifying " + recipient + " via email."
        send_content(url,collab,page_content,sender,recipient,subject,header,footer,page_marker)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import re, os, sys, string, optparse, socket
import xml.dom.minidom
from xml.dom.minidom import Node, ProcessingInstruction
from opencollab.meta import Metas
from opencollab.wiki import CLIWiki, WikiFailure
from opencollab.util.config import parseOptions
from opencollab.util.file import hashFile, uploadFile
from opencollab.util.wiki import importMetas

def fix_stylesheet_and_upload(collab, xml_page, file, fname): 
    try:
        doc = xml.dom.minidom.parse(file)
    except xml.parsers.expat.ExpatError:
        error = file + ": " + str(e) 
        sys.exit(error)

    stylesheet_nodes = []

    for node in doc.childNodes:
        if not isinstance(node, ProcessingInstruction):
            continue

        if node.nodeName != 'xml-stylesheet':
            continue

        stylesheet_nodes.append(node)

    if len(stylesheet_nodes) != 1:
        return False

    node = stylesheet_nodes[0]

    data = re.findall("[\t ]*([^=]+=[\'\"][^\'\"]+[\'\"])[\t ]*", node.data)
    attributes = dict([item.split("=") for item in data])

    stylesheet = attributes["href"].strip('"')

    if not os.path.exists(stylesheet):
        return False

    stylesheet_data = open(stylesheet).read()

    attributes["href"] = '"?action=AttachFile&amp;do=get&amp;target=nmap.xsl"'
    node.data = " ".join(["=".join(item) for item in attributes.iteritems()])

    xml_data = doc.toxml()

    collab.putAttachment(xml_page, fname, xml_data, True)
    collab.putAttachment(xml_page, "nmap.xsl", stylesheet_data, True)
    return True

def handle_script(host_ipv4, script, metas):
    """
    This function is meant for implementing any sort of custom
    postprocessing of specific Nmap script results
    """
    scriptid = script.getAttribute('id')
    scriptcontent = script.getAttribute('output')
    scriptcontent = scriptcontent.replace('&#xa;', ' ').replace('\n', ' ').strip()
    metas[host_ipv4]['NMAP %s' % (scriptid)].add(scriptcontent)                            
    return metas

def parse_xml(file, nmaprun_page):
    """
    xml.dom.minidom usage from
    http://trac.ict-ok.org/browser/trunk/org/ict_ok/admin_utils/netscan/nmap/nmap.py?rev=145
    """
    metas = Metas()
    try:
        doc = xml.dom.minidom.parse(file)
    except xml.parsers.expat.ExpatError, e:
        error = file + ": " + str(e) 
        sys.exit(error)
    hosts = doc.getElementsByTagName('host')
    for host in hosts:
        if host.nodeType == Node.ELEMENT_NODE:
            hostStatusElements = host.getElementsByTagName('status')
            if hostStatusElements[0].hasAttribute('state'):
                hostState = hostStatusElements[0].getAttribute('state')
                if hostState == 'up':
                    hostAddressElements = host.getElementsByTagName('address')

                    for addressElement in hostAddressElements:
                        addressType = addressElement.getAttribute('addrtype')
                        address = addressElement.getAttribute('addr')
                        if addressType == 'ipv4':
                            metas[address]['TYPE'].add('IPv4')
                            host_ipv4 = address
                            metas[address]['NMAP Run'].add('[[%s]]' % nmaprun_page)
                        if addressType == 'mac':
                            metas[address]['TYPE'].add('MAC')
                            metas[address]['Vendor'].add(addressElement.getAttribute('vendor'))
                            metas[address]['NMAP Run'].add('[[%s]]' % nmaprun_page)

                    hostNameElements = host.getElementsByTagName('hostname')
                    if host_ipv4 and len(hostNameElements) > 0:
                        hostname = hostNameElements[0].getAttribute('name')
                        metas[host_ipv4]['PTR'].add('[[%s]]' % hostname)
                        metas[hostname]['TYPE'].add('NAME')
                    hostPorts = host.getElementsByTagName('port')

                    if host_ipv4:
                        for hostPort in hostPorts:
                            portStatusElements = hostPort.getElementsByTagName('state')
                            if portStatusElements[0].getAttribute('state').find("open") >= 0:
                                portServiceElements = hostPort.getElementsByTagName('service')
                                state = portStatusElements[0].getAttribute('state')
                                port = hostPort.getAttribute('protocol').upper() + ":" + hostPort.getAttribute('portid').upper()
                                metas[host_ipv4]['listens to'].add('[[%s]]' % port)
                                if len(portServiceElements) > 0:
                                    service = portServiceElements[0].getAttribute('name')
                                    product = portServiceElements[0].getAttribute('product')
                                    if product:
                                        service += ' with ' + product
                                        service += ' ' + portServiceElements[0].getAttribute('version')
                                        service += ' ' +  portServiceElements[0].getAttribute('extrainfo')
                                    service += ' on port ' + port
                                    metas[host_ipv4]['serves'].add(service)

                            # Grab any script results
                            portScripts = hostPort.getElementsByTagName('script')
                            for script in portScripts:
                                metas = handle_script(host_ipv4, script, metas)

                        hostOss = host.getElementsByTagName('osclass')
                        for hostOs in hostOss:
                            metas[host_ipv4]['OS Type'].add(hostOs.getAttribute('type'))
                            metas[host_ipv4]['OS Vendor'].add(hostOs.getAttribute('vendor'))
                            metas[host_ipv4]['OS Family'].add(hostOs.getAttribute('osfamily'))
                            metas[host_ipv4]['OS Generation'].add(hostOs.getAttribute('osgen'))
                            metas[host_ipv4]['OS Accuracy'].add(hostOs.getAttribute('accuracy'))

                        # Grab any script results
                        hostScript = host.getElementsByTagName('hostscript')
                        for scriptportion in hostScript:
                            scripts = scriptportion.getElementsByTagName('script')
                            for script in scripts:
                                metas = handle_script(host_ipv4, script, metas)

                        # Grab traceroute results
                        traces = host.getElementsByTagName('trace')
                        for trace in traces:
                            port = trace.getAttribute('port')
                            hops = trace.getElementsByTagName('hop')
                            for hop in hops:
                                dst_ipv4 = hop.getAttribute('ipaddr')
                                # Lack of reply should be omitted
                                if dst_ipv4.startswith('0.'):
                                    continue
                                ttl = "%03d" % int(hop.getAttribute('ttl'))
                                trace_string = "TTL %s [[%s]] (port [[TCP:%s]])" % (ttl, dst_ipv4, port)
                                metas[host_ipv4]['NMAP traceroute'].add(trace_string)

    nmaprun = doc.getElementsByTagName('nmaprun') 
    metas[nmaprun_page]['Run Arguments'].add(nmaprun[0].getAttribute('args'))
    metas[nmaprun_page]['NMAP Version'].add(nmaprun[0].getAttribute('version'))
    metas[nmaprun_page]['Run Started'].add('<<DateTime(%s)>>' % nmaprun[0].getAttribute('start'))
    metas[nmaprun_page]['XML Output Version'].add(nmaprun[0].getAttribute('xmloutputversion'))
    run_stats = doc.getElementsByTagName('finished') 
    metas[nmaprun_page]['Run Ended'].add('<<DateTime(%s)>>' % run_stats[0].getAttribute('time'))
    hosts = doc.getElementsByTagName('hosts') 
    metas[nmaprun_page]['Hosts Up'].add(hosts[0].getAttribute('up'))
    metas[nmaprun_page]['Hosts Down'].add(hosts[0].getAttribute('down'))
    metas[nmaprun_page]['Hosts Total'].add(hosts[0].getAttribute('total'))
    return metas

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.add_option("-P", "--progress", action="store_true",
        dest="progress", default=False, help="Display file upload progress information." )
    parser.set_usage("%prog [options] NMAP-XML-FILES")

    failed = []
    ops = {}
    sect = "nmap-uploader"
    nmap_files=[]
    ops = parseOptions(parser, sect, template=True, category=True)
    url = ops["creds"]["url"]
    progress = ops[sect]["progress"]
    verbose = ops[sect]["verbose"]
    template = ops[sect]["template"]
    if template is None:
        template = "IdentityTemplate"
    category = ops[sect]["category"]
    if category is None:
        category = "CategoryIdentity"
    replace = ops[sect]["lasteditwins"] 
    args = ops[sect]["args"]
    if len(args) < 1:
        parser.error("At least one XML input file path needs to be specified.")

    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break
    if verbose:
        print "NOTE: Processing input files."

    for arg in args:
        nmap_files.append(arg)
    for file in nmap_files:
        xml_page = hashFile(file)
        fname = os.path.basename(file)
        if verbose:
            print "NOTE: Parsing", file
        metas = parse_xml(file, xml_page)
        if category is not None:
            for page in metas:
                metas[page]["category"].add(category)
        metas[xml_page]['TYPE'].add('NMAP Run')

        if verbose:
            print "NOTE: Importing metas to", url
        failed = importMetas(collab, metas, template, verbose, replace)
        if failed:
            for page in failed:
                if verbose:
                    print "ERROR uploading:",  page, repr(metas[page])
                else:
                    print "ERROR uploading:", page

        if verbose:
            print "NOTE: Fixing stylesheet and uploading", file, "and stylesheet to", xml_page
        if not fix_stylesheet_and_upload(collab, xml_page, file, fname):
            print "ERROR: Failed to patch xml file, uploading orginal instead"
            if verbose:
                print "NOTE: Uploading", file, "to", xml_page
            try:
                status = uploadFile(collab, xml_page, file, fname, progress)
            except (IOError, TypeError, RuntimeError), msg:
                sys.exit(msg)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


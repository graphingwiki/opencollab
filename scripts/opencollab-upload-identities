#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    The purpose if this script is to wautomate simple identity uploads
    with an input data set of one identity per page. Moreover, the
    identity instantiation should be done through templating, e.g.
    IdentityTemplate. At present the input identities are assumed
    to be email addresses.

    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>

"""
import sys
import os
import optparse
import ConfigParser
import collections

from opencollab.wiki import CLIWiki
from opencollab.meta import Meta
from opencollab.util.regexp import utctimestamp

def parse_config(cpath, args):
    configparser = ConfigParser.ConfigParser()
    configparser.readfp( open(cpath) )
    uris = dict( configparser.items("uploader") )
    if len(args) == 0:
        template = uris.pop("template")
        path = uris.pop("path")
        return template, path
    else:
        template = uris.pop("template")
        return template

def parse_input_file( metas, path ):
    try:
        file = open(path, "r")
        lines = file.readlines()
        file.close()
    except IOError:
        sys.exit(-1)
    statinfo = os.stat(path)
    epoch = statinfo.st_ctime
    epoch = utctimestamp(epoch)
    for line in lines:
        line = line.strip()
        local, domain = line.split('@') 
        title = local.title()
        id = title.split('.')
        sname = ' '.join( id )
        metas[line]["Attribution"].add(epoch)
        metas[line]["SMTP Domain"].add('[[%s]]' % domain)
        metas[line]["SMTP Local Part"].add(local)
        metas[line]["See Also"].add('[[%s]]' % sname)

def import_metas( collab, metas, template, verbose ):
    for page, pmeta in metas.iteritems():
        status = collab.setMeta( page, pmeta, template=template, replace=True )
        if verbose:
            print status

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="cpath",
        help="Config file path.")
    parser.add_option("-v", 
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." ) 
    parser.set_usage("%prog [options] WIKIURL TEMPLATE FILENAME")

    options, args = parser.parse_args()
    if options.cpath:
        if len(args) == 0:
            template, path = parse_config(options.cpath, args)
        elif len(args) == 1:
            template = parse_config(options.cpath, args)
            path = args.pop()
        elif len(args) == 2:
            template, path = args
        elif len(args) == 3:
            url, template, path = args
            collab = CLIWiki(url, config=options.cpath)
        if len(args) < 3:
            collab = CLIWiki(config=options.cpath)
    elif len(args) != 3:
        parser.error("Collab url, template name and input file name have to be defined.")
    else:
        url, template, path = args
        collab = CLIWiki(url)

    metas = collections.defaultdict( Meta )
    parse_input_file( metas, path )
    if not template:
        template = "IdentityTemplate"
    import_metas( collab, metas, template, options.verbose ) 

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    The purpose if this script is to wautomate simple identity uploads
    with an input data set of one identity per page. Moreover, the
    identity instantiation should be done through templating, e.g.
    IdentityTemplate. At present the input identities are assumed
    to be email addresses.

    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>

"""
import os
import re
import sys
import time
import optparse
from opencollab.util.config import parse_config
from opencollab.util.wiki import importMetas
from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Metas

def shred_email_address(addr):
    metas = Metas()
    epoch = "%d" % time.time()
    local, domain = addr.split('@') 
    if re.search('\.', local):
        title = local.title()
        id = title.split('.')
        sname = ' '.join( id )
    else:
        sname = local
    metas[addr]["ATTRIBUTION"].add('<<DateTime(%s)>>' % epoch)
    metas[addr]["SMTP DOMAIN"].add('[[%s]]' % domain)
    metas[addr]["SMTP LOCAL PART"].add(local)
    metas[addr]["SEE ALSO"].add('[[%s]]' % sname)
    metas[addr]["TYPE"].add("EMAIL")
    return metas

def parse_input_file(path):
    metas = Metas()
    try:
        file = open(path, "r")
        lines = file.readlines()
        file.close()
    except IOError:
        error = "Input file: " + file + " doesn't exist."
        sys.exit(error)
    for line in lines:
        line = line.strip()
        metas.update(shred_email_address(line))
    return metas

def get_identities_from_collab(collab, search):
    pages = Metas() 
    emails = Metas()
    tmp = search.split('||')
    keys = tmp[1:-1]
    pages = collab.getMeta(search) 
    for page in pages:
        for key in keys:
            if pages[page][key]:
                for value in pages[page][key]:
                    addr = re.sub('[\[\]]', '', value)
                    emails.update(shred_email_address(addr))
    return emails

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-c", "--config",
        action="store",
        type="string", dest="config",
	default = None,
	metavar="CONFIG",
        help="CONFIG file path.")
    parser.add_option("-f", "--file",
                      dest="path",
                      default=None,
                      metavar="FILE",
                      help=("Input FILE path."))
    parser.add_option("-s", "--search",
                      dest="search",
                      default=None,
                      metavar="SEARCH",
                      help=("MetaTable SEARCH argument."))
    parser.add_option("-t", "--template",
                      dest="template",
                      default=None,
                      metavar="TEMPLATE",
                      help=("Wiki TEMPLATE."))
    parser.add_option("-u", "--url",
                      dest="url",
                      default=None,
                      metavar="COLLAB-URL",
                      help=("COLLAB-URL to connect to."))
    parser.add_option("-v", 
        action="store_true", dest="verbose", default=False,
        help="Enable verbose output." ) 
    parser.set_usage("%prog [options]")
    options, args = parser.parse_args()
    iopts={}
    metas = Metas()
    if options.config:
        iopts = parse_config(options.config, "creds", "identity")
    if options.path:
        path = options.path
    elif options.config and "input-file" in iopts["identity"]:
        path = iopts["identity"]["input-file"]
    else:
        path = None
    if options.search:
        search = options.search
    elif options.config and "search" in iopts["identity"]:
        search = iopts["identity"]["search"]
    else:
        search = None
    if options.template:
        template = options.template
    elif options.config and "template" in iopts["identity"]:
        template = iopts["identity"]["template"]
    else:
        template = "IdentityTemplate"
    if options.url:
        url = options.url
        collab = CLIWiki(url)
    elif options.config and "url" in iopts["creds"]:
        url = iopts["creds"]["url"]
        collab = CLIWiki(url, config=options.config)
    else:
        parser.error("Collab URL needs to be specified. Use -h for help.")
    metas = Metas()
    if path is not None:
        if options.verbose:
            print "Parsing input file:", path
        metas.update(parse_input_file(path))
    if search is not None:
        if options.verbose:
            print "Getting identities with:", search, "from\n", url
        metas.update(get_identities_from_collab(collab, search))
    if options.verbose:
        print "Uploading identities to collab:", url
    importMetas(collab, metas, template, options.verbose) 

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."


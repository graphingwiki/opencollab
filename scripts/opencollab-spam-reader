#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    @copyright: 2008 Lari Huttunen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import optparse, sys
from opencollab.util.config import parseOptions
from opencollab.wiki import CLIWiki
from opencollab.meta import Meta, Metas
from opencollab.util.wiki import importMetas
from opencollab.util.emailutils import imapAuth, getMessagesAndUpload, parseMetaData, parseHTML, lexifyTokens, parseURLs

def main():
    parser = optparse.OptionParser()
    parser.add_option( "-e", "--imap-user",
        action="store", type="string", 
        dest="imapuser", default=None,
        metavar="IMAPS-USERNAME", help="IMAPS-USERNAME.")
    parser.add_option( "-i", "--imap-server",
        action="store", type="string", 
        dest="imapserver", default=None,
        metavar="IMAPS-SERVER", help="IMAPS-SERVER name or IP address.")
    parser.set_usage("%prog [options]")
    metas = Metas()
    failed = []
    ops = {}
    sect = "spam"
    ops = parseOptions(parser, sect)
    verbose = ops[sect]["verbose"]
    if verbose:
        print "Authenticating to collab."
    if ops[sect]["config"] is not None:
        collab = CLIWiki(config=ops[sect]["config"])
    else:
        collab = CLIWiki(ops["creds"]["url"])
    try:
        server = ops[sect]["imapserver"]
        user = ops[sect]["imapuser"]
    except KeyError:
        parser.error("You need to specify IMAP server address and username. Use -h for help.")
    try:
        password = ops[sect]["imappass"]
    except KeyError:
        password = None
    if verbose:
        print "Reading new spam messages from:", server, user, "INBOX"
    mailbox = imapAuth(server, user, password)
    if verbose:
        print "Uploading message files to collab."
    metas.update(getMessagesAndUpload(mailbox, collab))
    if verbose:
        print "Parsing meta data from email messages."
    metas.update(parseMetaData(metas))
    metas.update(parseHTML(metas))
    metas.update(lexifyTokens(metas))
    metas.update(parseURLs(metas))
    for page in metas:
        del metas[page]['msg']
        del metas[page]['text']
        del metas[page]['html']
    if verbose:
        "Importing metas to collab."
    failed = importMetas(collab, metas, ops[sect]["template"], verbose)
    if failed:
        for page in failed:
            if verbose:
                print "ERROR uploading:", repr(metas[page])
            else:
                print "ERROR uploading:", page

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

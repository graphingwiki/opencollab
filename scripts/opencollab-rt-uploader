#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    @copyright: 2012 Jussi Eronen
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""
import getpass
import re, os, sys, string, optparse, socket
import httplib, urllib
import xml.dom.minidom
from xml.dom.minidom import Node, ProcessingInstruction
from opencollab.meta import Meta, Metas
from opencollab.wiki import CLIWiki, WikiFailure, redirected
from opencollab.util.config import parseOptions
from opencollab.util.file import hashFile, uploadFile

def connect(server, urlpath, params, headers):
    conn = httplib.HTTPSConnection("%s:443" % (server))
    conn.request("POST", '/REST/1.0/' + urlpath, params, headers)
    response = conn.getresponse()
    data = response.read()
    conn.close()
    okmsg = "RT/9.9.9 200 Ok\n\n"
    if data.startswith(okmsg):
        data = data[len(okmsg):]
    return data

def main():
    parser = optparse.OptionParser()
    parser.add_option("-r", "--rt-server",
        dest="rtserver", default=None, metavar="RTSERVER",
        help="Source Request Tracker server.")
    parser.add_option("-R", "--rt-user",
        dest="rtuser", default=None, metavar="RTUSER",
        help="Source Request Tracker user.")
    parser.add_option( "-l", "--last-edit-wins",
        action="store_true", dest="lasteditwins", default=False,
        metavar = "LAST-EDIT-WINS", help="Replace meta keys and values with LAST-EDIT-WINS semantics.")
    parser.set_usage("%prog [options] RT-QUERY")

    failed = []
    ops = {}
    sect = "rt-uploader"
    nmap_files=[]
    ops = parseOptions(parser, sect, template=True, category=True)
    url = ops["creds"]["url"]
    rt = ops[sect]["rtserver"]
    rtuser = ops[sect]["rtuser"]
    rtpassword = ops[sect].get("rtpassword", None)
    template = ops[sect]["template"]
    if template is None:
        template = "CaseTemplate"
    category = ops[sect]["category"]
    if category is None:
        category = "CategoryCase"
    replace = ops[sect]["lasteditwins"] 
    args = ops[sect]["args"]
    if len(args) < 1:
        parser.error("At least one RT search string needs to be specified.")

    if rt is None:
        rt = redirected(raw_input, "RT server: ")
    if rtuser is None:
        rtuser = redirected(raw_input, "RT user: ")
    if rtpassword is None:
        rtpassword = redirected(getpass.getpass, "RT Password: ")

    searchparams = urllib.urlencode({'query': ' '.join(args), 'fields': 'id',
                                     'user': rtuser, 'pass': rtpassword}) + "&"
    params = urllib.urlencode({'user': rtuser, 'pass': rtpassword}) + "&"
    headers = {"Content-type": "application/x-www-form-urlencoded",
               "Accept": "text/plain"}

    data = connect(rt, 'search/ticket', searchparams, headers)
    ids = list()
    for line in data.split('\n'):
        line = line.strip()
        if not line.startswith('id:'):
            continue
        ids.append(line.split(': ')[-1])

    all_keys = set()

    metas = Metas()
    for ticket in ids:
        data = connect(rt, ticket, params, headers)
        for line in data.split('\n'):
            line = line.strip()
            if not line:
                continue
            linedata = line.split(':')
            if len(linedata) < 2:
                continue
            key = unicode(linedata[0].strip(), 'utf-8')
            all_keys.add(key)
            val = unicode(':'.join(linedata[1:]).strip(), 'utf-8')
            if not val:
                continue
            metas[ticket][key].add(val)

        if category is not None:
            for page in metas:
                if not 'gwikicategory' in metas[page]:
                    metas[page]["gwikicategory"].add(category)
        if template is not None:
            for page in metas:
                if not 'gwikitemplate' in metas[page]:
                    metas[page]["gwikitemplate"].add(template)

    while True:
        try:
            collab = CLIWiki(**ops['creds'])
        except WikiFailure:
            print "ERROR: Authentication failed."
        except (UnicodeError, socket.gaierror):
            sys.exit("ERROR: Not a valid URL.")
        else:
            break

    cleared = Meta()
    if replace:
        for page, meta in metas.iteritems():
            cleared[page] = all_keys

    collab.incSetMeta(cleared, Metas(), metas)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "Script interrupted via CTRL-C."

